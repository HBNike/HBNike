{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO1FHgugSFAcEA8xaJaqXA3",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/HBNike/HBNike/blob/main/Aula_03%20de%20python%20com%20Analise%20de%20sal%C3%A1rios%20de%20cientista%20de%20dados\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "K5YWbEhYV12X"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "fkLbc-4OSg0s"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('https://raw.githubusercontent.com/guilhermeonrails/data-jobs/refs/heads/main/salaries.csv')"
      ],
      "metadata": {
        "id": "-W8zF5zlWjAY"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "bthOpM1hXXLQ",
        "outputId": "724595b6-c619-4796-897b-a0ebfd124eff"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   work_year experience_level employment_type           job_title  salary  \\\n",
              "0     2025.0               SE              FT  Solutions Engineer  214000   \n",
              "1     2025.0               SE              FT  Solutions Engineer  136000   \n",
              "2     2025.0               MI              FT       Data Engineer  158800   \n",
              "3     2025.0               MI              FT       Data Engineer  139200   \n",
              "4     2025.0               EN              FT       Data Engineer   90000   \n",
              "5     2025.0               EN              FT       Data Engineer   80000   \n",
              "6     2025.0               SE              FT      Data Scientist  185000   \n",
              "7     2025.0               SE              FT      Data Scientist  148000   \n",
              "8     2025.0               MI              FT      Data Scientist  135000   \n",
              "9     2025.0               MI              FT      Data Scientist  108000   \n",
              "\n",
              "  salary_currency  salary_in_usd employee_residence  remote_ratio  \\\n",
              "0             USD         214000                 US           100   \n",
              "1             USD         136000                 US           100   \n",
              "2             USD         158800                 AU             0   \n",
              "3             USD         139200                 AU             0   \n",
              "4             USD          90000                 US             0   \n",
              "5             USD          80000                 US             0   \n",
              "6             USD         185000                 US             0   \n",
              "7             USD         148000                 US             0   \n",
              "8             USD         135000                 CA             0   \n",
              "9             USD         108000                 CA             0   \n",
              "\n",
              "  company_location company_size  \n",
              "0               US            M  \n",
              "1               US            M  \n",
              "2               AU            M  \n",
              "3               AU            M  \n",
              "4               US            M  \n",
              "5               US            M  \n",
              "6               US            M  \n",
              "7               US            M  \n",
              "8               CA            M  \n",
              "9               CA            M  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-58694137-638f-43bc-a4f9-74470524e631\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>work_year</th>\n",
              "      <th>experience_level</th>\n",
              "      <th>employment_type</th>\n",
              "      <th>job_title</th>\n",
              "      <th>salary</th>\n",
              "      <th>salary_currency</th>\n",
              "      <th>salary_in_usd</th>\n",
              "      <th>employee_residence</th>\n",
              "      <th>remote_ratio</th>\n",
              "      <th>company_location</th>\n",
              "      <th>company_size</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2025.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>FT</td>\n",
              "      <td>Solutions Engineer</td>\n",
              "      <td>214000</td>\n",
              "      <td>USD</td>\n",
              "      <td>214000</td>\n",
              "      <td>US</td>\n",
              "      <td>100</td>\n",
              "      <td>US</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2025.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>FT</td>\n",
              "      <td>Solutions Engineer</td>\n",
              "      <td>136000</td>\n",
              "      <td>USD</td>\n",
              "      <td>136000</td>\n",
              "      <td>US</td>\n",
              "      <td>100</td>\n",
              "      <td>US</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2025.0</td>\n",
              "      <td>MI</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Engineer</td>\n",
              "      <td>158800</td>\n",
              "      <td>USD</td>\n",
              "      <td>158800</td>\n",
              "      <td>AU</td>\n",
              "      <td>0</td>\n",
              "      <td>AU</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2025.0</td>\n",
              "      <td>MI</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Engineer</td>\n",
              "      <td>139200</td>\n",
              "      <td>USD</td>\n",
              "      <td>139200</td>\n",
              "      <td>AU</td>\n",
              "      <td>0</td>\n",
              "      <td>AU</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2025.0</td>\n",
              "      <td>EN</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Engineer</td>\n",
              "      <td>90000</td>\n",
              "      <td>USD</td>\n",
              "      <td>90000</td>\n",
              "      <td>US</td>\n",
              "      <td>0</td>\n",
              "      <td>US</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2025.0</td>\n",
              "      <td>EN</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Engineer</td>\n",
              "      <td>80000</td>\n",
              "      <td>USD</td>\n",
              "      <td>80000</td>\n",
              "      <td>US</td>\n",
              "      <td>0</td>\n",
              "      <td>US</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2025.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>185000</td>\n",
              "      <td>USD</td>\n",
              "      <td>185000</td>\n",
              "      <td>US</td>\n",
              "      <td>0</td>\n",
              "      <td>US</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2025.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>148000</td>\n",
              "      <td>USD</td>\n",
              "      <td>148000</td>\n",
              "      <td>US</td>\n",
              "      <td>0</td>\n",
              "      <td>US</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2025.0</td>\n",
              "      <td>MI</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>135000</td>\n",
              "      <td>USD</td>\n",
              "      <td>135000</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>CA</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2025.0</td>\n",
              "      <td>MI</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Scientist</td>\n",
              "      <td>108000</td>\n",
              "      <td>USD</td>\n",
              "      <td>108000</td>\n",
              "      <td>CA</td>\n",
              "      <td>0</td>\n",
              "      <td>CA</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-58694137-638f-43bc-a4f9-74470524e631')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-58694137-638f-43bc-a4f9-74470524e631 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-58694137-638f-43bc-a4f9-74470524e631');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-5d29afc4-661c-48ad-8f65-d18774f36beb\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5d29afc4-661c-48ad-8f65-d18774f36beb')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-5d29afc4-661c-48ad-8f65-d18774f36beb button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t6TB2ttTX4tR",
        "outputId": "9c96198c-786a-4e88-91b6-a61c8b675ff8"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 133349 entries, 0 to 133348\n",
            "Data columns (total 11 columns):\n",
            " #   Column              Non-Null Count   Dtype  \n",
            "---  ------              --------------   -----  \n",
            " 0   work_year           133339 non-null  float64\n",
            " 1   experience_level    133349 non-null  object \n",
            " 2   employment_type     133349 non-null  object \n",
            " 3   job_title           133349 non-null  object \n",
            " 4   salary              133349 non-null  int64  \n",
            " 5   salary_currency     133349 non-null  object \n",
            " 6   salary_in_usd       133349 non-null  int64  \n",
            " 7   employee_residence  133349 non-null  object \n",
            " 8   remote_ratio        133349 non-null  int64  \n",
            " 9   company_location    133349 non-null  object \n",
            " 10  company_size        133349 non-null  object \n",
            "dtypes: float64(1), int64(3), object(7)\n",
            "memory usage: 11.2+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "qKd8DFmqYlx6",
        "outputId": "41e38c24-42ae-49f4-f409-dc1cb41213d0"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           work_year        salary  salary_in_usd   remote_ratio\n",
              "count  133339.000000  1.333490e+05  133349.000000  133349.000000\n",
              "mean     2024.358770  1.632833e+05  157617.272098      20.905669\n",
              "std         0.680627  2.173860e+05   74288.363097      40.590044\n",
              "min      2020.000000  1.400000e+04   15000.000000       0.000000\n",
              "25%      2024.000000  1.060200e+05  106000.000000       0.000000\n",
              "50%      2024.000000  1.470000e+05  146206.000000       0.000000\n",
              "75%      2025.000000  1.990000e+05  198000.000000       0.000000\n",
              "max      2025.000000  3.040000e+07  800000.000000     100.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-39313eff-1222-447b-9300-7465d61c61b9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>work_year</th>\n",
              "      <th>salary</th>\n",
              "      <th>salary_in_usd</th>\n",
              "      <th>remote_ratio</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>133339.000000</td>\n",
              "      <td>1.333490e+05</td>\n",
              "      <td>133349.000000</td>\n",
              "      <td>133349.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2024.358770</td>\n",
              "      <td>1.632833e+05</td>\n",
              "      <td>157617.272098</td>\n",
              "      <td>20.905669</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.680627</td>\n",
              "      <td>2.173860e+05</td>\n",
              "      <td>74288.363097</td>\n",
              "      <td>40.590044</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>2020.000000</td>\n",
              "      <td>1.400000e+04</td>\n",
              "      <td>15000.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2024.000000</td>\n",
              "      <td>1.060200e+05</td>\n",
              "      <td>106000.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2024.000000</td>\n",
              "      <td>1.470000e+05</td>\n",
              "      <td>146206.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2025.000000</td>\n",
              "      <td>1.990000e+05</td>\n",
              "      <td>198000.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2025.000000</td>\n",
              "      <td>3.040000e+07</td>\n",
              "      <td>800000.000000</td>\n",
              "      <td>100.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-39313eff-1222-447b-9300-7465d61c61b9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-39313eff-1222-447b-9300-7465d61c61b9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-39313eff-1222-447b-9300-7465d61c61b9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-796690fb-3448-44b2-a64a-30f3f90ac120\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-796690fb-3448-44b2-a64a-30f3f90ac120')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-796690fb-3448-44b2-a64a-30f3f90ac120 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"work_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 46534.52447764897,\n        \"min\": 0.6806266087844866,\n        \"max\": 133339.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          133339.0,\n          2024.3587697522855,\n          2025.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10698704.831573008,\n        \"min\": 14000.0,\n        \"max\": 30400000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          163283.32258959571,\n          147000.0,\n          133349.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"salary_in_usd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 247237.56078114995,\n        \"min\": 15000.0,\n        \"max\": 800000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          157617.27209802848,\n          146206.0,\n          133349.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"remote_ratio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47137.84698309967,\n        \"min\": 0.0,\n        \"max\": 133349.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          20.905668583941388,\n          100.0,\n          40.590044190108124\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tlis6SWZZbAt",
        "outputId": "0e3810c2-e6ab-411f-fa6a-8672ebc9c87f"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(133349, 11)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "linhas, colunas = df.shape [0], df.shape[1]"
      ],
      "metadata": {
        "id": "NIe6bgeZZzsM"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('Linhas:', linhas)\n",
        "print('Colunas:', colunas)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "03N23jYFbT-p",
        "outputId": "fde2463d-c4a5-4606-9209-43eb5b534c04"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Linhas: 133349\n",
            "Colunas: 11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ll3vPDlPb_We",
        "outputId": "4a614799-9fd3-4a90-ef89-6ebac6cae15b"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['work_year', 'experience_level', 'employment_type', 'job_title',\n",
              "       'salary', 'salary_currency', 'salary_in_usd', 'employee_residence',\n",
              "       'remote_ratio', 'company_location', 'company_size'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "f35a9c60",
        "outputId": "900f3b20-4143-478e-e47d-ad6f11303d2d"
      },
      "source": [
        "df = df.rename(columns={\n",
        "    'ano': 'work_year',\n",
        "    'nivel_experiencia': 'experience_level',\n",
        "    'tipo_emprego': 'employment_type',\n",
        "    'cargo': 'job_title',\n",
        "    'salario': 'salary',\n",
        "    'moeda_salario': 'salary_currency',\n",
        "    'usd': 'salary_in_usd',\n",
        "    'residencia': 'employee_residence',\n",
        "    'remoto': 'remote_ratio',\n",
        "    'empresa': 'company_location',\n",
        "    'tamanho_empresa': 'company_size'\n",
        "})\n",
        "\n",
        "display(df.head())"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   work_year experience_level employment_type           job_title  salary  \\\n",
              "0     2025.0               SE              FT  Solutions Engineer  214000   \n",
              "1     2025.0               SE              FT  Solutions Engineer  136000   \n",
              "2     2025.0               MI              FT       Data Engineer  158800   \n",
              "3     2025.0               MI              FT       Data Engineer  139200   \n",
              "4     2025.0               EN              FT       Data Engineer   90000   \n",
              "\n",
              "  salary_currency  salary_in_usd employee_residence  remote_ratio  \\\n",
              "0             USD         214000                 US           100   \n",
              "1             USD         136000                 US           100   \n",
              "2             USD         158800                 AU             0   \n",
              "3             USD         139200                 AU             0   \n",
              "4             USD          90000                 US             0   \n",
              "\n",
              "  company_location company_size  \n",
              "0               US            M  \n",
              "1               US            M  \n",
              "2               AU            M  \n",
              "3               AU            M  \n",
              "4               US            M  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-75858be5-d443-4ef6-b6a3-fee756899344\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>work_year</th>\n",
              "      <th>experience_level</th>\n",
              "      <th>employment_type</th>\n",
              "      <th>job_title</th>\n",
              "      <th>salary</th>\n",
              "      <th>salary_currency</th>\n",
              "      <th>salary_in_usd</th>\n",
              "      <th>employee_residence</th>\n",
              "      <th>remote_ratio</th>\n",
              "      <th>company_location</th>\n",
              "      <th>company_size</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2025.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>FT</td>\n",
              "      <td>Solutions Engineer</td>\n",
              "      <td>214000</td>\n",
              "      <td>USD</td>\n",
              "      <td>214000</td>\n",
              "      <td>US</td>\n",
              "      <td>100</td>\n",
              "      <td>US</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2025.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>FT</td>\n",
              "      <td>Solutions Engineer</td>\n",
              "      <td>136000</td>\n",
              "      <td>USD</td>\n",
              "      <td>136000</td>\n",
              "      <td>US</td>\n",
              "      <td>100</td>\n",
              "      <td>US</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2025.0</td>\n",
              "      <td>MI</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Engineer</td>\n",
              "      <td>158800</td>\n",
              "      <td>USD</td>\n",
              "      <td>158800</td>\n",
              "      <td>AU</td>\n",
              "      <td>0</td>\n",
              "      <td>AU</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2025.0</td>\n",
              "      <td>MI</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Engineer</td>\n",
              "      <td>139200</td>\n",
              "      <td>USD</td>\n",
              "      <td>139200</td>\n",
              "      <td>AU</td>\n",
              "      <td>0</td>\n",
              "      <td>AU</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2025.0</td>\n",
              "      <td>EN</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Engineer</td>\n",
              "      <td>90000</td>\n",
              "      <td>USD</td>\n",
              "      <td>90000</td>\n",
              "      <td>US</td>\n",
              "      <td>0</td>\n",
              "      <td>US</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-75858be5-d443-4ef6-b6a3-fee756899344')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-75858be5-d443-4ef6-b6a3-fee756899344 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-75858be5-d443-4ef6-b6a3-fee756899344');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-fceeb084-5394-4e5b-a34e-d3e6bc1b5217\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fceeb084-5394-4e5b-a34e-d3e6bc1b5217')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-fceeb084-5394-4e5b-a34e-d3e6bc1b5217 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"work_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 2025.0,\n        \"max\": 2025.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2025.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"experience_level\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"SE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"employment_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"FT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"job_title\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Data Engineer\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44881,\n        \"min\": 90000,\n        \"max\": 214000,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          136000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"salary_currency\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"USD\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"salary_in_usd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44881,\n        \"min\": 90000,\n        \"max\": 214000,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          136000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"employee_residence\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"AU\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"remote_ratio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"company_location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"AU\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"company_size\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"M\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Geou1ihWVcD2"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xjDY5nr_dd6H",
        "outputId": "309d3166-9569-4e38-e7da-c1d2fa4ecd9a"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['work_year', 'experience_level', 'employment_type', 'job_title',\n",
              "       'salary', 'salary_currency', 'salary_in_usd', 'employee_residence',\n",
              "       'remote_ratio', 'company_location', 'company_size'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['experience_level'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "oTjTnQywdku_",
        "outputId": "40d7b0c1-ecb9-436e-bc64-1c9808712809"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "experience_level\n",
              "SE    77241\n",
              "MI    40465\n",
              "EN    12443\n",
              "EX     3200\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>experience_level</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>SE</th>\n",
              "      <td>77241</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MI</th>\n",
              "      <td>40465</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>EN</th>\n",
              "      <td>12443</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>EX</th>\n",
              "      <td>3200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['remote_ratio'].value_counts()"
      ],
      "metadata": {
        "id": "hlCfYA3meNal",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 210
        },
        "outputId": "7c35b8a5-5e6a-4a7e-8d6c-8b89ebdfea00"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "remote_ratio\n",
              "0      105312\n",
              "100     27718\n",
              "50        319\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>remote_ratio</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>105312</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100</th>\n",
              "      <td>27718</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>319</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "lXFGEEeqsaJw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['tamanho_empresa'].value_counts()"
      ],
      "metadata": {
        "id": "E-cMdFt-gb3g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "bg6nsN8ziCiU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "I1iM8cpximh9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1abd0e0c"
      },
      "source": [
        "remoto_mapping = {\n",
        "    0: 'Presencial',\n",
        "    50: 'Híbrido',\n",
        "    100: 'Remoto'\n",
        "}\n",
        "\n",
        "df['remoto'] = df['remoto'].map(remoto_mapping)\n",
        "\n",
        "display(df.head())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "id": "qzYn_Ap7ix8d"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe(include='object')"
      ],
      "metadata": {
        "id": "fi5LgSMzi9fh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "id": "aPxobETjj3FH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "'AULA 2'\n"
      ],
      "metadata": {
        "id": "LJyuOOPwSiX7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "id": "nvXywdWYSwrd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull()"
      ],
      "metadata": {
        "id": "2vXSuO87TuE6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "id": "HrQ2qqbfT0sZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['work_year'].unique()"
      ],
      "metadata": {
        "id": "zC7U6lL9UE9s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#criação de um dataframe\n",
        "import numpy as np\n",
        "df_salarios = pd.DataFrame({\n",
        "   'nome': ['Ana', 'Bruno', 'Carlos', 'Danielle','Val'],\n",
        "    'salario': [4000, np.nan, 5000, np.nan,100000,]\n",
        "       })\n",
        "#calcula a média salarial e subistitui os nulos  pela media e arredonda os valores\n",
        "df_salarios['salario_media'] = df_salarios['salario'].fillna(df_salarios['salario'].mean().round(2))\n",
        "df_salarios['salario_media'] = df_salarios['salario'].fillna(df_salarios['salario'].median())\n",
        "\n",
        "\n",
        "display(df_salarios)"
      ],
      "metadata": {
        "id": "NvDSHUaxWQ8Z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hKKtvt24bIB2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_salarios"
      ],
      "metadata": {
        "id": "mP0LYe67ZmAG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_temperaturas = pd.DataFrame({\n",
        "    'Dia': ['segunda ', 'terça', 'quarta', 'quinta', 'sexta', 'sabado', 'domingo'],\n",
        "    'Temperatura': [30, np.nam, np.nam, 28, 27, 30, 32]\n",
        "})\n",
        "\n",
        "df_temperaturas['Preenchido_ffill'] = df_temperaturas['Temperatura'].ffill()\n",
        "\n",
        "display(df_temperaturas)"
      ],
      "metadata": {
        "id": "UbrMeX8VbJMB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_cidades = pd.DataFrame({\n",
        "    'nome': ['Ana', 'Bruno', 'Carlos', 'Danielle','Val', 'Pedro', 'Luiza'],\n",
        "    'Cidade':['São Paulo', np.nan, 'Curitiba', np.nan, 'Belém', 'Vitória', np.nan]\n",
        "})\n",
        "\n",
        "df_cidades['cidade_preenchida'] = df_cidades['Cidade'].fillna('Não informado')\n",
        "\n",
        "display(df_cidades)"
      ],
      "metadata": {
        "id": "8Tn0hfcAc5dY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_limpo = df.dropna()"
      ],
      "metadata": {
        "id": "0QTVvM8SfuxF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_limpo.isnull().sum()"
      ],
      "metadata": {
        "id": "GEDWW2T3f36m"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_limpo.head()"
      ],
      "metadata": {
        "id": "SiXdy6WxgDMt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_limpo.info()"
      ],
      "metadata": {
        "id": "MaRrhaFZgQ7I"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_limpo = df_limpo.assign(work_year = df_limpo['work_year'].astype('int64'))\n",
        "display(df_limpo.head())"
      ],
      "metadata": {
        "id": "5tcFWzvPglKN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_limpo = df.dropna()\n",
        "df_limpo = df_limpo.assign(work_year = df_limpo['work_year'].astype('int64'))\n",
        "df_limpo.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PeP3QiP8hVZ9",
        "outputId": "f192b863-6a19-4d39-b64d-489c691d28a8"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 133339 entries, 0 to 133348\n",
            "Data columns (total 11 columns):\n",
            " #   Column              Non-Null Count   Dtype \n",
            "---  ------              --------------   ----- \n",
            " 0   work_year           133339 non-null  int64 \n",
            " 1   experience_level    133339 non-null  object\n",
            " 2   employment_type     133339 non-null  object\n",
            " 3   job_title           133339 non-null  object\n",
            " 4   salary              133339 non-null  int64 \n",
            " 5   salary_currency     133339 non-null  object\n",
            " 6   salary_in_usd       133339 non-null  int64 \n",
            " 7   employee_residence  133339 non-null  object\n",
            " 8   remote_ratio        133339 non-null  int64 \n",
            " 9   company_location    133339 non-null  object\n",
            " 10  company_size        133339 non-null  object\n",
            "dtypes: int64(4), object(7)\n",
            "memory usage: 12.2+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_limpo = df.dropna()\n",
        "df_limpo = df_limpo.assign(work_year = df_limpo['work_year'].astype('int64'))\n",
        "df_limpo.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "XOhTFBxQsbVS",
        "outputId": "c8148fdf-674a-4a65-ea07-e4b05ce69258"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   work_year experience_level employment_type           job_title  salary  \\\n",
              "0       2025               SE              FT  Solutions Engineer  214000   \n",
              "1       2025               SE              FT  Solutions Engineer  136000   \n",
              "2       2025               MI              FT       Data Engineer  158800   \n",
              "3       2025               MI              FT       Data Engineer  139200   \n",
              "4       2025               EN              FT       Data Engineer   90000   \n",
              "\n",
              "  salary_currency  salary_in_usd employee_residence  remote_ratio  \\\n",
              "0             USD         214000                 US           100   \n",
              "1             USD         136000                 US           100   \n",
              "2             USD         158800                 AU             0   \n",
              "3             USD         139200                 AU             0   \n",
              "4             USD          90000                 US             0   \n",
              "\n",
              "  company_location company_size  \n",
              "0               US            M  \n",
              "1               US            M  \n",
              "2               AU            M  \n",
              "3               AU            M  \n",
              "4               US            M  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-07aafad7-e983-4fbd-8506-3731559128a6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>work_year</th>\n",
              "      <th>experience_level</th>\n",
              "      <th>employment_type</th>\n",
              "      <th>job_title</th>\n",
              "      <th>salary</th>\n",
              "      <th>salary_currency</th>\n",
              "      <th>salary_in_usd</th>\n",
              "      <th>employee_residence</th>\n",
              "      <th>remote_ratio</th>\n",
              "      <th>company_location</th>\n",
              "      <th>company_size</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2025</td>\n",
              "      <td>SE</td>\n",
              "      <td>FT</td>\n",
              "      <td>Solutions Engineer</td>\n",
              "      <td>214000</td>\n",
              "      <td>USD</td>\n",
              "      <td>214000</td>\n",
              "      <td>US</td>\n",
              "      <td>100</td>\n",
              "      <td>US</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2025</td>\n",
              "      <td>SE</td>\n",
              "      <td>FT</td>\n",
              "      <td>Solutions Engineer</td>\n",
              "      <td>136000</td>\n",
              "      <td>USD</td>\n",
              "      <td>136000</td>\n",
              "      <td>US</td>\n",
              "      <td>100</td>\n",
              "      <td>US</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2025</td>\n",
              "      <td>MI</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Engineer</td>\n",
              "      <td>158800</td>\n",
              "      <td>USD</td>\n",
              "      <td>158800</td>\n",
              "      <td>AU</td>\n",
              "      <td>0</td>\n",
              "      <td>AU</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2025</td>\n",
              "      <td>MI</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Engineer</td>\n",
              "      <td>139200</td>\n",
              "      <td>USD</td>\n",
              "      <td>139200</td>\n",
              "      <td>AU</td>\n",
              "      <td>0</td>\n",
              "      <td>AU</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2025</td>\n",
              "      <td>EN</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Engineer</td>\n",
              "      <td>90000</td>\n",
              "      <td>USD</td>\n",
              "      <td>90000</td>\n",
              "      <td>US</td>\n",
              "      <td>0</td>\n",
              "      <td>US</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-07aafad7-e983-4fbd-8506-3731559128a6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-07aafad7-e983-4fbd-8506-3731559128a6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-07aafad7-e983-4fbd-8506-3731559128a6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d33f532e-e4bc-42c3-944e-d87567a66041\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d33f532e-e4bc-42c3-944e-d87567a66041')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d33f532e-e4bc-42c3-944e-d87567a66041 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_limpo"
            }
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "display(df_limpo.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "i7kBCVWptGIa",
        "outputId": "25767b4f-0868-46c1-98e8-0f0337accb73"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   work_year experience_level employment_type           job_title  salary  \\\n",
              "0       2025               SE              FT  Solutions Engineer  214000   \n",
              "1       2025               SE              FT  Solutions Engineer  136000   \n",
              "2       2025               MI              FT       Data Engineer  158800   \n",
              "3       2025               MI              FT       Data Engineer  139200   \n",
              "4       2025               EN              FT       Data Engineer   90000   \n",
              "\n",
              "  salary_currency  salary_in_usd employee_residence  remote_ratio  \\\n",
              "0             USD         214000                 US           100   \n",
              "1             USD         136000                 US           100   \n",
              "2             USD         158800                 AU             0   \n",
              "3             USD         139200                 AU             0   \n",
              "4             USD          90000                 US             0   \n",
              "\n",
              "  company_location company_size  \n",
              "0               US            M  \n",
              "1               US            M  \n",
              "2               AU            M  \n",
              "3               AU            M  \n",
              "4               US            M  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2b8fa030-2b4d-46d7-ad40-7573ba4cf93b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>work_year</th>\n",
              "      <th>experience_level</th>\n",
              "      <th>employment_type</th>\n",
              "      <th>job_title</th>\n",
              "      <th>salary</th>\n",
              "      <th>salary_currency</th>\n",
              "      <th>salary_in_usd</th>\n",
              "      <th>employee_residence</th>\n",
              "      <th>remote_ratio</th>\n",
              "      <th>company_location</th>\n",
              "      <th>company_size</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2025</td>\n",
              "      <td>SE</td>\n",
              "      <td>FT</td>\n",
              "      <td>Solutions Engineer</td>\n",
              "      <td>214000</td>\n",
              "      <td>USD</td>\n",
              "      <td>214000</td>\n",
              "      <td>US</td>\n",
              "      <td>100</td>\n",
              "      <td>US</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2025</td>\n",
              "      <td>SE</td>\n",
              "      <td>FT</td>\n",
              "      <td>Solutions Engineer</td>\n",
              "      <td>136000</td>\n",
              "      <td>USD</td>\n",
              "      <td>136000</td>\n",
              "      <td>US</td>\n",
              "      <td>100</td>\n",
              "      <td>US</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2025</td>\n",
              "      <td>MI</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Engineer</td>\n",
              "      <td>158800</td>\n",
              "      <td>USD</td>\n",
              "      <td>158800</td>\n",
              "      <td>AU</td>\n",
              "      <td>0</td>\n",
              "      <td>AU</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2025</td>\n",
              "      <td>MI</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Engineer</td>\n",
              "      <td>139200</td>\n",
              "      <td>USD</td>\n",
              "      <td>139200</td>\n",
              "      <td>AU</td>\n",
              "      <td>0</td>\n",
              "      <td>AU</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2025</td>\n",
              "      <td>EN</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Engineer</td>\n",
              "      <td>90000</td>\n",
              "      <td>USD</td>\n",
              "      <td>90000</td>\n",
              "      <td>US</td>\n",
              "      <td>0</td>\n",
              "      <td>US</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2b8fa030-2b4d-46d7-ad40-7573ba4cf93b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2b8fa030-2b4d-46d7-ad40-7573ba4cf93b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2b8fa030-2b4d-46d7-ad40-7573ba4cf93b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-087c66f0-dde3-41a1-8872-9287439c9a4f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-087c66f0-dde3-41a1-8872-9287439c9a4f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-087c66f0-dde3-41a1-8872-9287439c9a4f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df_limpo\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"work_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2025,\n        \"max\": 2025,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2025\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"experience_level\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"SE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"employment_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"FT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"job_title\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Data Engineer\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44881,\n        \"min\": 90000,\n        \"max\": 214000,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          136000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"salary_currency\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"USD\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"salary_in_usd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44881,\n        \"min\": 90000,\n        \"max\": 214000,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          136000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"employee_residence\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"AU\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"remote_ratio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"company_location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"AU\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"company_size\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"M\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_limpo['experience_level'].value_counts().plot(kind ='bar',title = 'Distribuição de Senioridade')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 494
        },
        "id": "vkn2j93ttW8m",
        "outputId": "deb77b88-ede6-4f57-abcf-b12de507a619"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'Distribuição de Senioridade'}, xlabel='experience_level'>"
            ]
          },
          "metadata": {},
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "nwnTHHt4uMkp"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.barplot(data=df_limpo, x='experience_level', y='salary_in_usd')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "A2pGlhJAvNNr",
        "outputId": "02204323-aa4e-4f7d-8705-ac1f4c7326de"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='experience_level', ylabel='salary_in_usd'>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "FBxJxwO0wjZ5"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8,5))\n",
        "sns.barplot(data=df_limpo, x='experience_level', y='salary_in_usd')\n",
        "plt.title('Salário médio por Nível de Senioridade')\n",
        "plt.xlabel('Senioridade')\n",
        "plt.ylabel('Salário Médio Anual (USD)')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "m0c9AWHCw-Ji",
        "outputId": "448bd1a6-ed6c-4d95-84be-c4da2239ea0b"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_limpo.groupby('experience_level')['salary_in_usd'].mean().sort_values(ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "-zD1WDAfyQCb",
        "outputId": "b8655da9-f8ea-4553-9dff-0d7b601778c6"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "experience_level\n",
              "EX    202027.667813\n",
              "SE    172850.838301\n",
              "MI    143044.845979\n",
              "EN     99034.963267\n",
              "Name: salary_in_usd, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>salary_in_usd</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>experience_level</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>EX</th>\n",
              "      <td>202027.667813</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SE</th>\n",
              "      <td>172850.838301</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MI</th>\n",
              "      <td>143044.845979</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>EN</th>\n",
              "      <td>99034.963267</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Ordem = df_limpo.groupby('experience_level')['salary_in_usd'].mean().sort_values(ascending=False).index"
      ],
      "metadata": {
        "id": "OZMhxzlZy6Xi"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Ordem"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TwBs6jHhzO9Q",
        "outputId": "d62295b0-d370-4f8f-91a6-b6ea8f4bf33d"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['EX', 'SE', 'MI', 'EN'], dtype='object', name='experience_level')"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8,5))\n",
        "sns.barplot(data=df_limpo, x='experience_level', y='salary_in_usd', order = Ordem)\n",
        "plt.title('Salário médio por Nível de Senioridade')\n",
        "plt.xlabel('Senioridade')\n",
        "plt.ylabel('Salário Médio Anual (USD)')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "M74V7qwSzg73",
        "outputId": "1383f09f-0d92-4ef0-9647-07bdbdabbc14"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,5))\n",
        "sns.histplot(df_limpo['salary_in_usd'], bins=50, kde=True)\n",
        "plt.title('Distribuição dos Salários Anuais')\n",
        "plt.xlabel('Salário em USD')\n",
        "plt.ylabel('Frequencia')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "Vo7NCcCkz8pB",
        "outputId": "81e6ad60-7091-4f40-8ec7-a40df251c7bb"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8,5))\n",
        "sns.boxplot(x=df_limpo['salary_in_usd'])\n",
        "plt.title('Boxplot Salário')\n",
        "plt.xlabel('Salário em USD')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "zGA_wqr71iZy",
        "outputId": "8c926a0f-7bc2-48f2-b366-0a5bd495235c"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "AeX1Sv0m4F24"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5ac92d80"
      },
      "source": [
        "# Rename the 'experience_level' column\n",
        "df_limpo = df_limpo.rename(columns={'experience_level': 'senioridade'})\n",
        "\n",
        "# Map the abbreviated values to full names\n",
        "senioridade_mapping = {\n",
        "    'SE': 'Senior',\n",
        "    'EN': 'Junior',\n",
        "    'MI': 'Pleno',\n",
        "    'EX': 'Executivo'\n",
        "}\n",
        "\n",
        "df_limpo['senioridade'] = df_limpo['senioridade'].map(senioridade_mapping)\n",
        "\n",
        "display(df_limpo.head())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "order_experience_level = ['Junior', 'Pleno', 'Senior', 'Executivo']\n",
        "plt.figure(figsize=(8,5))\n",
        "sns.boxplot(x='senioridade', y='salary_in_usd', data=df_limpo, order= order_experience_level)\n",
        "plt.title('Boxplot da distribuição do Salário por senioridade')\n",
        "plt.ylabel('Salário em USD')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "uG9qFsNR5gQs",
        "outputId": "0aa0b977-f3c8-42ea-ba0c-592c11d3f47e"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ac0a7055",
        "outputId": "d575ae17-cdea-49d5-f8c5-27bf346a5d60"
      },
      "source": [
        "# Execute the cell that renames the 'experience_level' column to 'senioridade' and maps the values\n",
        "# Rename the 'experience_level' column\n",
        "df_limpo = df_limpo.rename(columns={'experience_level': 'senioridade'})\n",
        "\n",
        "# Map the abbreviated values to full names\n",
        "senioridade_mapping = {\n",
        "    'SE': 'Senior',\n",
        "    'EN': 'Junior',\n",
        "    'MI': 'Pleno',\n",
        "    'EX': 'Executivo'\n",
        "}\n",
        "\n",
        "df_limpo['senioridade'] = df_limpo['senioridade'].map(senioridade_mapping)\n",
        "\n",
        "display(df_limpo.head())"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   work_year senioridade employment_type           job_title  salary  \\\n",
              "0       2025      Senior              FT  Solutions Engineer  214000   \n",
              "1       2025      Senior              FT  Solutions Engineer  136000   \n",
              "2       2025       Pleno              FT       Data Engineer  158800   \n",
              "3       2025       Pleno              FT       Data Engineer  139200   \n",
              "4       2025      Junior              FT       Data Engineer   90000   \n",
              "\n",
              "  salary_currency  salary_in_usd employee_residence  remote_ratio  \\\n",
              "0             USD         214000                 US           100   \n",
              "1             USD         136000                 US           100   \n",
              "2             USD         158800                 AU             0   \n",
              "3             USD         139200                 AU             0   \n",
              "4             USD          90000                 US             0   \n",
              "\n",
              "  company_location company_size  \n",
              "0               US            M  \n",
              "1               US            M  \n",
              "2               AU            M  \n",
              "3               AU            M  \n",
              "4               US            M  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a702f66f-8bbc-4b15-864d-b9db871f7a3c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>work_year</th>\n",
              "      <th>senioridade</th>\n",
              "      <th>employment_type</th>\n",
              "      <th>job_title</th>\n",
              "      <th>salary</th>\n",
              "      <th>salary_currency</th>\n",
              "      <th>salary_in_usd</th>\n",
              "      <th>employee_residence</th>\n",
              "      <th>remote_ratio</th>\n",
              "      <th>company_location</th>\n",
              "      <th>company_size</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2025</td>\n",
              "      <td>Senior</td>\n",
              "      <td>FT</td>\n",
              "      <td>Solutions Engineer</td>\n",
              "      <td>214000</td>\n",
              "      <td>USD</td>\n",
              "      <td>214000</td>\n",
              "      <td>US</td>\n",
              "      <td>100</td>\n",
              "      <td>US</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2025</td>\n",
              "      <td>Senior</td>\n",
              "      <td>FT</td>\n",
              "      <td>Solutions Engineer</td>\n",
              "      <td>136000</td>\n",
              "      <td>USD</td>\n",
              "      <td>136000</td>\n",
              "      <td>US</td>\n",
              "      <td>100</td>\n",
              "      <td>US</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2025</td>\n",
              "      <td>Pleno</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Engineer</td>\n",
              "      <td>158800</td>\n",
              "      <td>USD</td>\n",
              "      <td>158800</td>\n",
              "      <td>AU</td>\n",
              "      <td>0</td>\n",
              "      <td>AU</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2025</td>\n",
              "      <td>Pleno</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Engineer</td>\n",
              "      <td>139200</td>\n",
              "      <td>USD</td>\n",
              "      <td>139200</td>\n",
              "      <td>AU</td>\n",
              "      <td>0</td>\n",
              "      <td>AU</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2025</td>\n",
              "      <td>Junior</td>\n",
              "      <td>FT</td>\n",
              "      <td>Data Engineer</td>\n",
              "      <td>90000</td>\n",
              "      <td>USD</td>\n",
              "      <td>90000</td>\n",
              "      <td>US</td>\n",
              "      <td>0</td>\n",
              "      <td>US</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a702f66f-8bbc-4b15-864d-b9db871f7a3c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a702f66f-8bbc-4b15-864d-b9db871f7a3c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a702f66f-8bbc-4b15-864d-b9db871f7a3c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-79acffb6-4d6c-40e3-93dc-31d858affa3f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-79acffb6-4d6c-40e3-93dc-31d858affa3f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-79acffb6-4d6c-40e3-93dc-31d858affa3f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df_limpo\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"work_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2025,\n        \"max\": 2025,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2025\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"senioridade\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Senior\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"employment_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"FT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"job_title\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Data Engineer\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44881,\n        \"min\": 90000,\n        \"max\": 214000,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          136000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"salary_currency\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"USD\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"salary_in_usd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44881,\n        \"min\": 90000,\n        \"max\": 214000,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          136000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"employee_residence\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"AU\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"remote_ratio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"company_location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"AU\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"company_size\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"M\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "order_experience_level = ['Junior', 'Pleno', 'Senior', 'Executivo']\n",
        "plt.figure(figsize=(8,5))\n",
        "sns.boxplot(x='senioridade', y='salary_in_usd', data=df_limpo, order= order_experience_level, palette='Set2', hue=\"senioridade\")\n",
        "plt.title('Boxplot da distribuição do Salário por senioridade')\n",
        "plt.ylabel('Salário em USD')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "EaPWvqD_7DYo",
        "outputId": "4861264d-5383-4ac2-b400-2552de2d5ddd"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "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wo8//oh+/frhhRdewNtvv41PP/0U7777Lrp27QoA4r+qxMXFYezYsfDw8MDatWtx//59sWCtLDw8HAEBAQgMDERJSQm++uorjB8/HjExMfD393/q671jxw78+9//Rv/+/TF//nzcvHkTAQEBsLW1hYuLy1OfO3bsWFy9ehVz585F+/btkZmZiePHj+POnTto3749Nm3ahLlz58LCwgLLly8HADg6OiqtY/bs2bC3t8fKlStRUFDw1O3duHEDr7zyCmbOnInJkydj165dGD9+PI4ePYqXXnrpqc9VR3l5OUaOHImTJ09i4sSJmDdvHvLz83H8+HFcuXIFHTt2BABs2rQJY8aMqfH1njFjBvbs2YNx48Zh4cKFOHfuHNauXYs//vij2oJYQd33X53PQnUcHBxgamqK77//HnPnzoWtrW21sXl5edi+fTteffVVvPnmm8jPz8eOHTvg5+eHhISEp15Y+dtvv+HMmTOYOHEi2rRpg1u3biEiIgKDBg1CcnIyzMzMlOLV3SdCQkIQGhoKX19fzJo1C9euXcO2bdvE7anTZWHChAlo37491q5di19//RWffvopHj58iC+++EKM0eR9vHbtGl599VX8+9//xptvvokuXbqo3G5JSQn8/PxQXFyMuXPnwsnJCXfv3kVMTAxycnJgbW0NAFizZg3ee+89TJgwATNmzEBWVhY2b96MF154AUlJSbCxsRHX+fDhQwwbNgxjxozBhAkT8M0332DJkiXo0aMHhg8fXu1rcOLECQwfPhwdOnRASEgICgsLsXnzZjz33HM4f/58le5n48ePh5ubGz788MOn/lCbMWMG9u7di0mTJqF///44deqUyr9Hv/32G86ePSvuH7dv38a2bduq7B/p6ekYPHgwysrKsHTpUpibm+Ozzz5TeaT/yy+/xOTJk+Hn54ePP/4Yjx8/xrZt2zBgwAAkJSU1yi51VIlARKJdu3YJAKrcjI2Nhd27dyvFHjhwQAAgrF69Wmn5uHHjBIlEIvz555/ismXLlglSqVT46aefhP379wsAhE2bNik9b/LkyQIAYe7cueIyuVwu+Pv7CzKZTMjKyhKXAxDef/998fHo0aMFmUwm/PXXX+KytLQ0wdLSUnjhhRfEZYpt//DDD2q9Hp6enkKrVq2EnJwccVlcXJwAQGjXrp1S7OPHj5Uel5SUCN27dxeGDBny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ERGRhlhEExERERFpiBcW6pBcLkdaWhosLS0hkUj0nQ4RERERVSIIAvLz8+Hs7AyptPrjzSyidSgtLQ0uLi76ToOIiIiIapCamoo2bdpU284iWocsLS0BPHlTrKys9JwNEREREVWWl5cHFxcXsW6rDotoHVJ04bCysmIRTURERNSA1dT1lhcWEhERERFpiEU0EREREZGGWEQTEREREWmIRTQRERERkYZYRBMRERERaYhFNBERERGRhlhEExERERFpiEU0EREREZGGWEQTEREREWmIMxYSUbMnl8uRkpKCnJwc2NjYwN3dHVIpjzGQ9pWVlSEuLg6ZmZlwcHDA0KFDYWjIr2Kixkiv3xLl5eV477334OrqClNTU3Ts2BEffPABBEEQYwRBwMqVK9GqVSuYmprC19cXN27cUFrPgwcPEBgYCCsrK9jY2GD69Ol49OiRUsylS5fw/PPPw8TEBC4uLli3bl2VfPbv3w93d3eYmJigR48eiI2NVWpXJxcialwSEhKwYMECrF69Glu2bMHq1auxYMECJCQk6Ds1amKio6MxZcoU7N27F3Fxcdi7dy+mTJmC6OhofadGRLWg1yL6448/xrZt27Blyxb88ccf+Pjjj7Fu3Tps3rxZjFm3bh0+/fRTREZG4ty5czA3N4efnx+KiorEmMDAQFy9ehXHjx9HTEwMfvrpJ7z11ltie15eHoYOHYp27dohMTER69evR0hICD777DMx5uzZs3j11Vcxffp0JCUlYfTo0Rg9ejSuXLmiUS5E1HgkJCQgPDwcLi4uCA0Nxc6dOxEaGgoXFxeEh4ezkCatiY6ORkxMDCwtLTFjxgxERERgxowZsLS0RExMDAtposZI0CN/f39h2rRpSsvGjBkjBAYGCoIgCHK5XHBychLWr18vtufk5AjGxsbC//3f/wmCIAjJyckCAOG3334TY44cOSJIJBLh7t27giAIQkREhNCiRQuhuLhYjFmyZInQpUsX8fGECRMEf39/pVz69esn/Pvf/1Y7l5rk5uYKAITc3Fy14pu70tJS4fDhw8KuXbuEw4cPC6WlpfpOiZqQ8vJy4e233xbWr18vlJeXV2lbv3698Pbbb1dpI9JUaWmpEBgYKMycObPK37HS0lJh5syZQmBgIP/GETUQ6tZrej0S3b9/f5w8eRLXr18HAFy8eBG//PILhg8fDgC4desW0tPT4evrKz7H2toa/fr1Q3x8PAAgPj4eNjY26NOnjxjj6+sLqVSKc+fOiTEvvPACZDKZGOPn54dr167h4cOHYkzF7ShiFNtRJ5fKiouLkZeXp3Qj9fC0J9W3lJQUZGVlYdSoUVX6P0ulUgQEBCArKwspKSl6ypCairi4OMjlcowfP75K/2dDQ0OMGzcOcrkccXFxesqQiGpDr1czLF26FHl5eXB3d4eBgQHKy8uxZs0aBAYGAgDS09MBAI6OjkrPc3R0FNvS09Ph4OCg1G5oaAhbW1ulGFdX1yrrULS1aNEC6enpNW6nplwqW7t2LUJDQ9V4JagixWlPa2trjB8/Hr1798b58+exf/9+xMTEAAAmTZqk5yypscvJyQEAuLi4qGxXLFfEEdVWZmYmAKB3794q2728vJTiiKhx0OuR6H379iEqKgrR0dE4f/489uzZgw0bNmDPnj36TEtrli1bhtzcXPGWmpqq75QavLKyMsTGxsLa2hqbN2/GkCFDYGNjgyFDhmDz5s2wtrZGbGwsysrK9J0qNXI2NjYAUO3nUrFcEUdUW4oDPefPn1fZnpSUpBRHRI2DXovoRYsWYenSpZg4cSJ69OiB119/HQsWLMDatWsBAE5OTgCAjIwMpedlZGSIbU5OTlV+vZeVleHBgwdKMarWUXEb1cVUbK8pl8qMjY1hZWWldKOn42lP0hV3d3fY29vj4MGDkMvlSm1yuRyHDh2Cvb093N3d9ZQhNRVDhw6FVCrF/v37qxwAKCsrwzfffAOpVIqhQ4fqKUMiqg29FtGPHz+u0hfRwMBA/EJzdXWFk5MTTp48Kbbn5eXh3Llz8PHxAQD4+PggJycHiYmJYsypU6cgl8vRr18/Meann35CaWmpGHP8+HF06dIFLVq0EGMqbkcRo9iOOrlQ3fG0J+mKVCpFYGAgkpKSEBYWhuvXr6OwsBDXr19HWFgYkpKSEBgYyPGiqc4MDQ0xYsQI5ObmYu7cuTh58iQePHiAkydPYu7cucjNzcWIESM4XjRRI6PXT+zLL7+MNWvWoG3btujWrZv4ZTZt2jQAgEQiwfz587F69Wq4ubnB1dUV7733HpydnTF69GgAQNeuXTFs2DC8+eabiIyMRGlpKYKCgjBx4kQ4OzsDeNJ/NjQ0FNOnT8eSJUtw5coVhIeH45NPPhFzmTdvHgYOHIiNGzfC398fX331FX7//XdxGDx1cqG6q3jac8iQIVXaedqTtKlv376YN28eoqKiEBISIi63t7fHvHnz0LdvX/0lR02K4jqO2NhY7NixQ1wulUoxcuRIXudB1BjpaLQQlfLy8oR58+YJbdu2FUxMTIQOHToIy5cvVxqKTi6XC++9957g6OgoGBsbCy+++KJw7do1pfXcv39fePXVVwULCwvByspKmDp1qpCfn68Uc/HiRWHAgAGCsbGx0Lp1a+Gjjz6qks++ffuEzp07CzKZTOjWrZtw+PBhpXZ1cnkaDnFXMw4FRfpQXl4uXL16VThz5oxw9epVDmtH9YZDdxI1fOrWaxJBqDA9INWrvLw8WFtbIzc3l/2jn6Li6Bzjxo2Dl5cXkpKS8M033yA3N5dHbYiIiKjeqFuvsQMWNTiKAvnw4cNKpz0lEgkLaCIiImoQeMUMNUidOnVCy5YtlZa1bNkSnTp10lNGRERERP/DI9HU4CQkJCA8PBxeXl6YO3cuXFxckJqaioMHDyI8PJwXfBEREZHe8Ug0NShyuRxRUVHw8vJCcHAw3NzcYGJiAjc3NwQHB8PLywtRUVFVxvUlIiIi0iUW0dSgpKSkICsrC6NGjaoyPq9UKkVAQACysrKQkpKipwyJiIiIWERTA5OTkwMAcHFxUdmuWK6IIyIiItIHFtHUoNjY2AAAUlNTVbYrliviiIiIiPSBRTQ1KO7u7rC3t8fBgwer9HuWy+U4dOgQ7O3t4e7urqcMiYiIiFhEUwMjlUoRGBgoTgF//fp1FBYW4vr16wgLC0NSUhICAwOr9JcmIiIi0iXOWKhDnLFQfQkJCYiKikJWVpa4zN7eHoGBgRzejoiIiOoNZyykRq1v377o06cPUlJSkJOTAxsbG7i7u/MINBERETUILKKpwZJKpfDw8NB3GtQMZGdnY9GiRSgpKYFMJsP69ethZ2en77SoCfrnn3+wZMkSCIIAiUSCjz/+GG3atNF3WkRUC+zOoUPszkHU8Lz22msqJ++RSqXYu3evHjKipmrSpEnVtkVHR+swEyJ6GnXrNZ4bJ6Jmq2IBbWFhgWnTpsHCwgLAk9FgXnvtNX2mR01IxQLawMAAo0aNgoGBgcp2Imoc2J2DiJql7OxssYD+9NNPxe4bvr6+yM7Oxttvvw25XI7s7Gx27aA6+eeff8T769atE7tvvPLKK/jnn3+wePFiMY5dO4gaDx6JJqJmadGiRQCeHIGuXCTb2dnB3NxcKY6otpYsWQLgyRHoykVymzZtxCPSijgiahxYRBNRs1RSUgIAmDBhgsr2MWPGKMUR1Zbi0qORI0eqbPfz81OKI6LGgUU0ETVLMpkMALBv3z6V7d99951SHFFtSSQSAEBMTIzK9mPHjinFEVHjwCKaiJql9evXAwAePXqE7Oxspbbs7GwUFBQoxRHV1scffwwAKC8vV+ofDTzpB11eXq4UR0SNAy8sJKJmyc7ODlKpFHK5HG+//TbMzc0xZswYfPfdd2IBLZVKeVEh1VnFftCLFy+GgYEB/Pz8cOzYMbGArhxHRA0fx4nWIY4TTdTwcJxo0hWOE03UOKhbr7GI1iEW0UQNE2csJF3hjIVEDR+L6AaIRTRRwySXy5GSkoKcnBzY2NjA3d0dUikvGSEiao7UrdfYJ5qImrWEhARERUUhKytLXGZvb4/AwED07dtXj5kREVFDxiKaGiweHaT6lpCQgPDwcDg4OCgtl0qlCA8Px7x581hIk1bt27cPBw4cEB+PHj262rHKiahhY3cOHWJ3DvXx6CDVN7lcjgULFijtY5XZ29vjk08+4Y830gpeWEjUOKhbr/GbgRocxdFBFxcXhIaGYufOnQgNDYWLiwvCw8ORkJCg7xSpCUhJSalSQFc+Ip2VlYWUlBRdpkVNVOUCWjGtfHXtRNTwsTsHNShyuRxRUVHw8vJCcHCweATQzc0NwcHBCAsLQ1RUFPr06cOjg1Qn8fHx4v158+ahX79+4uNz584hPDxcjPPw8NB5ftR0VJwV880338TgwYPFxz/88AM+//xzMY5dO4gaD1Yh1KAojg6OGjWqSpEslUoREBDAo4OkFSdPnhTvVyygKz+uGEdUGxX7QFcsoCs/rhhHRA0fi2hqUHJycgAALi4uKtsVyxVxRHWlmLWwIlWTrxDVVeUuHAomJiY6zoSItIFFNDUoNjY2AIDU1FSV7YrlijiiupLL5QgLC8P169dRWFiI69evIywsTN9pUROkmE6+sqKiIh1nQkTawCKaGhR3d3fY29vj4MGDKo8OHjp0CPb29nB3d9dThtRUTJkyRbyflJSEkJAQTJ8+HSEhIUhKSlIZR1Qbo0ePFu//8MMPSm0VH1eMI6KGj0Pc6RCHuFOPYnQOLy8vBAQEwMXFBampqTh06BCSkpI4di9pjaoREyofLeTQY6QNlfc1ExOTKkegua8RNQyNYoi79u3bQyKRVLnNmTMHwJNTXHPmzEHLli1hYWGBsWPHIiMjQ2kdd+7cgb+/P8zMzODg4IBFixahrKxMKeb06dPo3bs3jI2N0alTJ+zevbtKLlu3bkX79u1hYmKCfv36VRlGTZ1cSDv69u2LefPmITU1VenoYGpqKgto0qrKRQsLaKovlfclFtBEjZ9eh7j77bffUF5eLj6+cuUKXnrpJYwfPx4AsGDBAhw+fBj79++HtbU1goKCMGbMGJw5cwYAUF5eDn9/fzg5OeHs2bO4d+8e3njjDRgZGeHDDz8EANy6dQv+/v6YOXMmoqKicPLkScyYMQOtWrWCn58fAODrr79GcHAwIiMj0a9fP2zatAl+fn64du2aOG5sTbmQdvXt2xd9+vThjIVU77y9vZGYmKhyOZE2jRw5EjExMSqXE1Hj06C6c8yfPx8xMTG4ceMG8vLyYG9vj+joaIwbNw7Ak+HPunbtivj4eDz77LM4cuQIRo4cibS0NDg6OgIAIiMjsWTJEmRlZUEmk2HJkiU4fPgwrly5Im5n4sSJyMnJwdGjRwE8Gc7qmWeewZYtWwA86Xvr4uKCuXPnYunSpcjNza0xF3WwOwdRw7Jx40YkJibC0NAQI0aMwKBBg3D69GnExsairKwM3t7eWLhwob7TpCYgOjoaMTExsLa2xvjx49G7d2+cP38e+/fvR25uLkaOHMkJV4gaiEbRnaOikpIS7N27F9OmTYNEIkFiYiJKS0vh6+srxri7u6Nt27biJAnx8fHo0aOHWEADgJ+fH/Ly8nD16lUxpuI6FDGKdZSUlCAxMVEpRiqVwtfXV4xRJxcialwUn31DQ0Ns374dEydOhJOTEyZOnIjt27fD0NAQiYmJKCkp0Xeq1MiVlZUhNjYW1tbW2Lx5M4YMGQIbGxsMGTIEmzdvhrW1tfjDjYgajwZTRB84cAA5OTnilfDp6emQyWRVhjJzdHREenq6GFOxgFa0K9qeFpOXl4fCwkJkZ2ejvLxcZUzFddSUiyrFxcXIy8tTuhFRw7B3714AwIgRIyCTyZTaZDIZhg0bphRHVFtxcXGQy+UYP348ysrKsGHDBixZsgQbNmxAWVkZxo0bB7lcjri4OH2nSkQaaDDTfu/YsQPDhw+Hs7OzvlPRmrVr1yI0NFTfaRCRCooLgwcNGqSyfdCgQYiJieEFxFRnmZmZAJ4U09u3bxeXp6amYtq0aWjbtq1SHBE1Dg3iSPTff/+NEydOYMaMGeIyJycnlJSUVJmZLiMjA05OTmJM5S84xeOaYqysrGBqago7OzsYGBiojKm4jppyUWXZsmXIzc0Vb9VNIEJEuqc4+3T69GmV7Yrllc9SEWlKcYH6nTt3IJFI0L17d7zyyivo3r07JBIJ7ty5oxRHRI1Dgyiid+3aBQcHB/j7+4vLvL29YWRkhJMnT4rLrl27hjt37sDHxwcA4OPjg8uXLyv9ej9+/DisrKzg4eEhxlRchyJGsQ6ZTAZvb2+lGLlcjpMnT4ox6uSiirGxMaysrJRuRNQwvPbaawCA2NjYKv2eS0pKxAuPFXFEtfXCCy+I962trXHlyhV8/fXXuHLlCqytrVXGEVHDp/ciWi6XY9euXZg8eTIMDf/Xu8Ta2hrTp09HcHAwfvjhByQmJmLq1Knw8fERR8MYOnQoPDw88Prrr+PixYs4duwYVqxYgTlz5sDY2BgAMHPmTNy8eROLFy9GSkoKIiIisG/fPixYsEDcVnBwMD7//HPs2bMHf/zxB2bNmoWCggJMnTpV7VyIqHFR/IAuKyvDjBkzEB0djbS0NERHR2PGjBni6ByV+0sTaSoyMlK8/+jRI7z88svYuHEjXn75ZTx69EhlHBE1fHof4i4uLk4ck7lz585KbUVFRVi4cCH+7//+D8XFxfDz80NERIRSF4q///4bs2bNwunTp2Fubo7Jkyfjo48+UirIT58+jQULFiA5ORlt2rTBe++9V2Uq3y1btmD9+vVIT0+Hp6cnPv30U/Tr10+jXGrCIe6IGh7FMHeVcXg70pbFixfjn3/+ga2tLXJyciCXy8U2qVQKKysr5OTkoE2bNli3bp0eMyUiQP16Te9FdHPCIpqo4UlISMCXX36J+/fvi8tatmyJ119/nbNjkla8//77uHHjBnr27Il33nkHcXFxyMzMhIODA4YOHYr169fj8uXLcHNz48XoRA2AuvVagxmdg4hI1xISEhAeHg4vLy+8/fbbcHFxQWpqKg4ePIjw8HBOM09aMXDgQNy4cQOXL19GWVkZRowYIbYVFRWJk4ENHDhQXykSUS2wiCaiZkkulyMqKgpeXl4IDg4Wp5R3c3NDcHAwwsLCEBUVhT59+nC6eaoTRbc/QRAwffp09O/fH8OHD8eRI0dw9uxZKE4Ia9I9kIj0j98MRNQspaSkICsrC6NGjapSJEulUgQEBCArKwspKSl6ypCaCnd3d9jb28PMzAyCIODMmTNYsWIFzpw5A0EQYGZmBnt7e7i7u+s7VSLSAItoImqWFOO+u7i4qGxXLK88PjyRpqRSKQIDA1FYWIiePXuiS5cuaN26Nbp06YKePXuisLAQgYGBPONB1MjwE0tEzZKNjQ0AVDsJkmK5Io6oLvr27Yt58+bh3r17uHbtGu7evYtr167h3r177HtP1EixTzQRNUuKU+wHDx5U6hMNPOkvfejQIZ5iJ63q27cv+vTpg5SUFOTk5MDGxgbu7u48Ak3USLGIJqJmSXGKPTw8HGFhYQgICBBH5zh06BCSkpIwb948FjikVVKpVJxRl4gaN44TrUMcJ5qo4UlISEBUVBSysrLEZfb29ggMDOQpdiKiZojjRBMRqYGn2ImIqDZYRBNRs8dT7EREpCkeaiEiIiIi0hCPRBMREemIXC5n1yGiJoJFNBERkQ7wIlaipoVFNBERUT1LSEhAeHg4vLy8EBQUJA6nePDgQYSHh3PCFaJGiEU0ETV7PMVO9UkulyMqKgpeXl6YOXMm1q9fj/v376Nly5ZYtGgRIiMjERUVhT59+nC/I2pEWEQTUbPGU+xU31JSUpCVlYXy8nK89dZb4vIHDx7grbfeQosWLfDw4UOkpKRwlBiiRoQ/eYmo2VKcYndxcUFoaCh27tyJ0NBQuLi4IDw8HAkJCfpOkZqAnJwcAE+KZgDo2bMnQkJC0LNnTwDAw4cPleKIqHHgkWgiapYqnmIPDg4WT6O7ubkhODgYYWFhPMVOWiGTycT727dvh5mZGQBg6dKlePz4MWbMmFEljogaPn4zUIMll8uRnJyMs2fPIjk5GXK5XN8pUROiOMU+atSoKkWyVCpFQEAAsrKykJKSoqcMqan4/vvvAQCWlpYwMTFRajMxMYGlpaVSHBE1DjwSTQ0S+6lSfVOcOndxcUFRURG2bNmCrKws2Nvbi6MnVIwjqq379+8DAPLz87FhwwYYGRmhoKAA5ubmKC0tRX5+vlIcETUOLKKpweFQUKQLNjY2AIAVK1YgLS1NXJ6amopp06bB2dlZKY6otlq2bIkHDx7AxMQEFy5cqNJuYmKCoqIitGzZUvfJEVGtsTsHNSiV+6m6ubnBxMRE7Kfq5eWFqKgodu2gOnN3d4ehoaFYQA8YMABr167FgAEDAABpaWkwNDSEu7u7PtOkJmDJkiUAgKKiIgCAj48PXnvtNfj4+CgtV8QRUePAIpoaFPZTJV0pKSlBWVkZAKBXr17o2LEjbt26hY4dO6JXr14AgLKyMpSUlOgzTWoCDA2VT/reunULKSkpuHXr1lPjiOqC1xXVP35iqUGp2E9VFfZTJW3ZsmULAKB169a4fPkyLl68KLZJpVK0bt0ad+/exZYtW/DOO+/oK01qAvbu3QvgSZFcVlaG9PR0pKeni+2K5Xv37sW0adP0lSY1IbyuSDdYRFODouh/mpqaCjc3tyrtqampSnFEtaX4cklLS4Onpyd69eoFmUyGkpISXLx4Uey7WvFLiKg2MjIyADw5s2FpaQlTU1OUlJRAJpOhsLBQvLBQEUdUF7yuSHfYnYMaFHd3d9jb2+PgwYNVTj3J5XIcOnQI9vb27KdKdWZnZwcAaNGiBRYuXIihQ4di0KBBGDp0KBYuXCj+UFPEEdWWvb09gCfjQIeHh2Po0KHo27cvhg4divDwcHF8aEUcUW3xuiLdYhFNDYpUKkVgYCCSkpIQFhaG69evo7CwENevX0dYWBiSkpIQGBjIyS+ozl566SUAT2aRq9zvuaSkRJxFThFHVFuOjo4AnuxXM2bMwN69exEXF4e9e/dixowZ4v6niCOqLV5XpFvszkENTt++fTFv3jxERUUhJCREXG5vb8/TUKQ1jx8/Fu9Pnz4d/fv3x/Dhw3HkyBGcPXtWZRxRbVQc/1kul6Nnz54YPXo0Dhw4gEuXLqmMI6oNXlekWyyiqUHq27cv+vTpg5SUFOTk5MDGxgbu7u48Ak1ao+iu4ezsjLS0NJw5cwZnzpwR2xXL2f+e6kox/rNUKoVcLselS5eUimfFco4TTXXF64p0ixUJNVhSqRQeHh7o378/PDw8WECTVin63zs5OWH79u3o3bs3XFxc0Lt3b2zfvh1OTk7sf09aZWxsjIiICLRu3Rrm5uZo3bo1IiIixD7RRHVV8bqisrIypSHuysrKeF2RlvFINBE1S4r+9+Hh4YiIiEBAQIB4FXtERASSkpIwb948/nijOlN00ygsLMTs2bPF5QUFBUqP2Z2D6krxd23Tpk1K/e0BiKMPzZ8/n3/XtIRFNBE1W+x/T7rg4OCg1TgiahhYRBNRs8b+91TfBg0aJE64EhkZiV9++QWZmZlwcHDAgAEDMHPmTDGOqC4UQ9z17t0b8+fPx/Xr18W/a507d8amTZsQFRWFPn368G+cFrCIJqJmTy6X4/bt22Jh07lzZ37BkNZ89dVX4v0FCxagsLBQfPztt98qxXHGQqoLxRB3QUFBMDQ0hIeHh1J7QEAAQkJCkJKSUqWNNKf3b4m7d+/itddeQ8uWLWFqaooePXrg999/F9sFQcDKlSvRqlUrmJqawtfXFzdu3FBax4MHDxAYGAgrKyvY2Nhg+vTpePTokVLMpUuX8Pzzz8PExAQuLi5Yt25dlVz2798Pd3d3mJiYoEePHoiNjVVqVycXImpcoqOjMWXKFKWxe6dMmYLo6Gh9p0ZNRMWZCCsW0JUfc8ZCqisOcadbei2iHz58iOeeew5GRkY4cuQIkpOTsXHjRrRo0UKMWbduHT799FNERkbi3LlzMDc3h5+fH4qKisSYwMBAXL16FcePH0dMTAx++uknvPXWW2J7Xl4ehg4dinbt2iExMRHr169HSEgIPvvsMzHm7NmzePXVVzF9+nQkJSVh9OjRGD16NK5cuaJRLkTUeERHRyMmJkbl7JgxMTEspEkr1J1EhZOtUF1VHOJOFQ5xp10SQRAEfW186dKlOHPmDH7++WeV7YIgwNnZGQsXLsQ777wDAMjNzYWjoyN2796NiRMn4o8//oCHhwd+++039OnTBwBw9OhRjBgxAv/88w+cnZ2xbds2LF++HOnp6eJQQkuXLsWBAwfEWXteeeUVFBQUICYmRtz+s88+C09PT0RGRqqVS03y8vJgbW2N3NxcWFlZ1f6FI6I6Kysrw+TJkyEIAiwtLfHKK6+gd+/eOH/+PL7++mvk5+dDIpFgz549MDRkzzeqvdu3b+Pdd9+tMe7DDz9E+/bt6z8harLkcjkWLFgAFxcXBAcHK3VLk8vlCAsLQ2pqKj755BN2WXsKdes1vb6Chw4dQp8+fTB+/Hg4ODjAy8sLn3/+udh+69YtpKenw9fXV1xmbW2Nfv36IT4+HgAQHx8PGxsbsYAGAF9fX0ilUpw7d06MeeGFF5TG4vTz88O1a9fEqX3j4+OVtqOIUWxHnVwqKy4uRl5entKNiBqGo0ePQhAEmJiYYOvWrRgyZAhsbGwwZMgQbN26FSYmJhAEAUePHtV3qtTIVS6gu3XrhgkTJqBbt25PjSPSlGKIu6SkJISFheH69esoLCzE9evXERYWhqSkJAQGBrKA1hK9voo3b97Etm3b4ObmhmPHjmHWrFl4++23sWfPHgBAeno6gKqnuBwdHcW29PT0KsMCGRoawtbWVilG1ToqbqO6mIrtNeVS2dq1a2FtbS3equujRES6p7j2YsyYMZBKpUqTEkilUowePVopjkhbrl69in379uHq1av6ToWaIMXQnampqQgJCcH06dMREhKC1NRUDt2pZXo9RymXy9GnTx98+OGHAAAvLy9cuXIFkZGRmDx5sj5T04ply5YhODhYfJyXl8dCmqiBuXPnDhYsWICsrCxxmb29PTp37qzHrKip8vT0hJGREQoKCmBubo7S0lJcuHBB32lRE8OhO3VDr0V0q1atqgyx0rVrV3HIHycnJwBPrlhu1aqVGJORkQFPT08xJjMzU2kdZWVlePDggfh8JyenKlc9Kx7XFFOxvaZcKjM2NoaxsfFTXgEi0pfevXvj+vXr+OWXX9CzZ0/07t0bpaWlMDIywr1793DmzBkxjqguDA0NUVZWBgCYNGkS2rRpI7b9888/YhHNvvekTVKplMPY1TO9/iR57rnncO3aNaVl169fR7t27QAArq6ucHJywsmTJ8X2vLw8nDt3Dj4+PgAAHx8f5OTkIDExUYw5deoU5HI5+vXrJ8b89NNPKC0tFWOOHz+OLl26iCOB+Pj4KG1HEaPYjjq5EFHjMWzYMPH+pUuXcOzYMZw6dQrHjh3DpUuXVMYR1caoUaPE+4sXL8Ybb7yBr776Cm+88QYWL16sMo6IGj69FtELFizAr7/+ig8//BB//vknoqOj8dlnn2HOnDkAAIlEgvnz52P16tU4dOgQLl++jDfeeAPOzs5if8WuXbti2LBhePPNN5GQkIAzZ84gKCgIEydOhLOzM4Anv/xlMhmmT5+Oq1ev4uuvv0Z4eLhSV4t58+bh6NGj2LhxI1JSUhASEoLff/8dQUFBaudCRI3Hn3/+qdU4oupUvpamrKwMhw4dEo9OVxdHRA2bXs8dPfPMM/jvf/+LZcuWYdWqVXB1dcWmTZsQGBgoxixevBgFBQV46623kJOTgwEDBuDo0aMwMTERY6KiohAUFIQXX3wRUqkUY8eOxaeffiq2W1tbIy4uDnPmzIG3tzfs7OywcuVKpbGk+/fvj+joaKxYsQLvvvsu3NzccODAAXTv3l2jXIioccjOzgYAyGQylJSUVGlXLFfEEdWWra2tVuOIqGHQ6zjRzQ3HiSZqOHbu3IkTJ04gICAA48aNQ1xcnDjt99ChQ7Fv3z7ExMTA19eXUzFTnSjG7rW0tMSDBw+UZouzsbGBra0t8vPzOXYvUQOhbr3GqxiIqFmSSCQAngy1KZVKMWLECLFNLpfj9u3bSnFEtaUYuzc8PByenp7o1auXeKbj4sWLuHDhAubNm8cCmqiRYRFNRM2Sov/plStXEBYWhoCAALi4uCA1NRWHDh3ClStXlOKI6kIxdm9UVBSSkpLE5fb29hy7l6iRYncOHWJ3DqKGo6ysDFOmTIGJiQlkMlmVU+wlJSUoKirC7t27OfQYaY1cLufYvUQNXKOY9puISF8MDQ0xYsQIPH78WKmABoCcnBw8fvwYI0aMYAFNWqXoKnT9+nXcvn0bcrlc3ykRUS3x24GImq179+7VqZ1IE9HR0YiNjVUqnKOjozFixAhMmjRJj5kRUW2wiCaiZqmkpASJiYkwNDREZGQkTp8+LY7OMWjQIMycOROJiYkoKSmBTCbTd7rUyEVHRyMmJgbW1tYYP348evfujfPnz2P//v2IiYkBABbSRI0Mi2hqsIqKirBlyxZkZWXB3t4eQUFBHJObtGbv3r0AgBEjRuD27dviYwBo3749hg0bhpiYGOzdu5dD3FGdlJWVITY2FtbW1li4cCFWrlwptq1atQobN25EbGwsJkyYwO5DRI0ILyzUIV5YqL4VK1bg5s2bVZZ36NABq1ev1kNG1NSsXbsWly9frjGuR48eWLZsmQ4yoqYqNjZW6UdadV577TWloRaJSD94YSE1WooCWiKRYMCAAVi7di0GDBgAiUSCmzdvYsWKFfpOkZoAVUPXqeq2wSHuqK4yMzO1GkdEDQOLaGpQioqKxAJ6x44dmD17Ntq1a4fZs2djx44dYiFdVFSk71Spkevdu3eVZaqm/1YVR6QJAwMDrcYRUcPAIpoalC1btgAAnnvuuSr9n01MTNC/f3+lOKLaWrdundLj1q1bIzg4GK1bt35qHJGmjhw5It7v2bMnQkNDsXPnToSGhqJnz54q44io4eMVDNSgZGVlAQD8/f1Vtg8fPhxnzpwR44i05e7duwgLC9N3GtTE/fXXX1i7di1KS0thZGTEo89UbzixT/1jEU0Nir29PVJTU3H48GHMnj27SrviSI29vb2uUyMiqrOCggLxfnl5uR4zoaYsISEBUVFRSgec7O3tERgYyCnmtYg/SahBCQoKAgCcOXOmSr/noqIinD17VimOqLbMzMyUHgcEBCAsLAwBAQFPjSPSVPfu3ZUem5mZoXv37lX2rcpxRLWRkJCA8PBwuLi4KHUdcnFxQXh4OBISEvSdYpPBIpoaFBMTE3To0AGCIGD69OnYunUrbt68ia1bt2L69OkQBAEdOnTgeNFUZ507d1Z6fOjQIXz55Zc4dOjQU+OINDVgwAClx4WFhXBwcEBhYeFT44g0JZfLERUVBS8vLwQHB8PNzQ0mJiZwc3NDcHAwvLy8EBUVxenmtYRFNDU4q1evFgvpM2fOYMWKFThz5oxYQHOcaNKGFi1aVFmWlJSkVhyRJqKjo5UeC4KAU6dOofI0DZXjiDSVkpKCrKwsjBo1qkr/Z6lUioCAAGRlZSElJUVPGTYt7BNNDdLq1as5YyHVq+zsbK3GEVXn8ePHWo0jqk5OTg4AwMXFRWW7YrkijuqGRTQ1WCYmJnjnnXf0nQY1UY6Ojrh8+TJsbGxUfqEoZqviZCtUV2ZmZsjLy4OpqSmKi4uVTqVLpVLIZDIUFRWx/z3VmY2NDQAgNTUVbm5uVdpTU1OV4qhu2J2DiJql1157DQDw6NEjREZGonfv3nBxcUHv3r0RGRkpjqKgiCOqrY8++gjAk77QHh4emDJlCt566y1MmTIFHh4e4kXUijii2nJ3d4e9vT0OHjxYpd+zXC7HoUOHYG9vD3d3dz1l2LTwSDQ1WBzjkuqTTCaDt7c3EhMTERQUhGHDhmHSpEk4ffo0goKCUFZWBm9vb5VTgRNpwsrKSrx/5coVpKenY/z48YiJiVHqLlQxjqg2pFIpAgMDER4ejo0bN6JXr16QyWQoKSnBxYsXceHCBcybN4/fpVoiESpf2UD1Ji8vTzxFzD+WT8cxLklXNm7ciMTExCrLvb29sXDhQj1kRE1NcnIyVq9eDUNDQ5SVlVVpVyxfsWIFPDw89JAhNTXR0dGIjY2t0nVoxIgRmDRpkh4zaxzUrdd4JJoaHMUYl15eXggKCoKLiwtSU1Nx8OBBhIeHY968eSykSWtUFdBPW06kKUWfe1UFdMXlvNiLtCEhIQGHDx9Gr1694OjoKM6OmZGRgcOHD6NTp078DtUSHs+nBoVjXJIuVT4iU7mfII/YkDZUvojL1NQUr7/+OkxNTZ8aR6QpxXdo+/bt8c8//+DYsWM4deoUjh07hn/++Qft27fnd6gW8Ug0NSiKMS6DgoKqHeMyJCQEKSkpPO1JdfL777+L95cuXYqePXuKjy9duiRe5PX777+jT58+Os+Pmg5bW1vxflhYGJycnAAAw4cPR3p6OoKDg6vEEdWG4js0KyuryvUceXl5Yh98fodqB49EU4PCMS5JV8LCwsT7FQvoyo8rxhHVxpIlS8T7e/fuxfXr11FYWIjr169j7969KuOIauPBgwfi/W7duilN+92tWzeVcVR7PBJNDQrHuCRdq26op44dO+Kvv/7ScTbUFJWWlgIABg4ciOTkZISEhIht9vb2eO6553DmzBkxjqi2cnNzAQBt27bFwoULxTO6bm5uWLhwIZYtW4bU1FQxjuqGR6KpQeEYl6Rr1U1/ywKatMXIyAgAcPbs2SpTfQuCgISEBKU4otp69OgRAMDY2Fhlu2K5Io7qRuMj0bm5uTh+/Dhu374NiUQCV1dX+Pr6csg20oqKY1yGhYUhICBAHJ3j0KFDSEpK4hiXpBXBwcFiV40LFy4gLS0NmZmZcHBwgLOzs1IcUV2sX78e8+fPR2lpaZVp5Cs+Xr9+va5ToyZGIpEAAG7cuKHyO/TPP/9UiqO60aiI3rt3L4KCgpCXl6e03NraGpGRkXjllVe0mhw1T3379sW8efMQFRVV5bQnh7cjbal4seC6devUiiOqDTs7O63GEVXHw8MDBw4cgLOzM+7cuaP0HWpnZwdnZ2ekpaXxokItUbuIPn/+PKZOnYrAwEAsWLAA7u7uEAQBycnJ2LRpE15//XW4u7ujV69e9ZkvNRN9+/ZFnz59OGMh1auRI0ciJibmqe1EdZWcnKx2XPfu3es5G2rKPDw8YGVlhbS0NHh5eWHkyJFKMxYmJSXBysqKRbSWqD1j4dSpU/Ho0SPs379fZfu4ceNgZWWFnTt3ajXBpoQzFhI1HGVlZZgyZcpTx0uVSqXYvXs3DA15DTbVXnR09FN/rCmMHDmSY5NTnSUkJGDTpk1i8aygeDx//nye0a2BuvWa2of1zpw5g3//+9/Vts+cORO//PKLZlkSEelJXFxcjRMOyOVyxMXF6SgjaqouXbok3pdIJBgwYADWrl2LAQMGKPVNrRhHVFt9+/bF/PnzqxR/VlZWLKC1TO3DK2lpaejcuXO17Z07d8bdu3e1khQRUX27c+eOeN/IyEhpeLGKjyvGEdVGxXHtP//8c5iZmQEAZs+ejSlTpmDGjBlV4ojqgl0idUPtIvrx48cwMTGptt3Y2BhFRUVaSYqIqL5VnLHQzc0N165dQ3l5OQwMDODm5ib2Y60YR1QbxcXF4n1FwVxTHFFdyeVy3L59Wxx1qHPnziyitUyjV/PYsWM4dOiQytuxY8c03nhISAgkEonSreL4v0VFRZgzZw5atmwJCwsLjB07FhkZGUrruHPnDvz9/WFmZgYHBwcsWrQIZWVlSjGnT59G7969YWxsjE6dOmH37t1Vctm6dSvat28PExMT9OvXTxy3U5NciKjxqFiwJCcno7y8HABQXl6udCEYCxuqq+rG7K1tHFFNoqOjMWXKFOzduxdxcXHYu3cvpkyZgujoaH2n1qRodLXM5MmTn9pem3EHu3XrhhMnTvwvoQoX8CxYsACHDx/G/v37YW1tjaCgIIwZMwZnzpwB8OTLzt/fH05OTjh79izu3buHN954A0ZGRvjwww8BALdu3YK/vz9mzpyJqKgonDx5EjNmzECrVq3g5+cHAPj6668RHByMyMhI9OvXD5s2bYKfnx+uXbsGBwcHtXIhosbFyMhILJyBJ397Ro0ahYMHDyr9EOcEGFRXHTt2RFJSklpxRHWluJDV2toa48ePR+/evXH+/Hns379fvMCVF7Bqh9qjc9SHkJAQHDhwABcuXKjSlpubC3t7e0RHR2PcuHEAnsws1rVrV8THx+PZZ5/FkSNHMHLkSKSlpcHR0REAEBkZiSVLliArKwsymQxLlizB4cOHceXKFXHdEydORE5ODo4ePQoA6NevH5555hls2bIFwJNTIC4uLpg7dy6WLl2qVi7q4OgcRA3H5s2bER8fX2Ocj48P5s6dq4OMqKnasGEDzp8/X2Nc79698c477+ggI2qqFKMOWVpaYvPmzUoHJsvKyjB37lzk5+dz1KEaaH10jvpy48YNODs7o0OHDggMDBQv4klMTERpaSl8fX3FWHd3d7Rt21b84ouPj0ePHj3EAhoA/Pz8kJeXh6tXr4oxFdehiFGso6SkBImJiUoxUqkUvr6+Yow6uahSXFyMvLw8pRsRNQyVu2zVNY6oOuoU0JrEEVVHMerQ+PHjIZVKkZycjLNnzyI5ORlSqRTjxo3jqENapPbPkOvXryMnJ0dpaJSTJ09i9erVKCgowOjRo/Huu+9qtPF+/fph9+7d6NKlC+7du4fQ0FA8//zzuHLlCtLT0yGTyWBjY6P0HEdHR6SnpwMA0tPTlQpoRbui7WkxeXl5KCwsxMOHD1FeXq4yJiUlRVxHTbmosnbtWoSGhqr3YhCRTlXsyqGNOCIifcvMzATwpHvt/PnzlaaVt7Ozw+jRo5XiqG7UPhK9ZMkSpcHib926hZdffhkymQw+Pj5Yu3YtNm3apNHGhw8fjvHjx6Nnz57w8/NDbGwscnJysG/fPo3W01AtW7YMubm54i01NVXfKRHR/6duX2f2iSZt6tq1K+zt7WFubg57e3t07dpV3ylRE6K4juvzzz+vcvY7Ly8P27dvV4qjulH7SPTvv/+OxYsXi4+joqLQuXNncVSOnj17YvPmzZg/f36tk7GxsUHnzp3x559/4qWXXkJJSYk4vqFCRkYGnJycAABOTk5VTrUqRsyoGFN5FI2MjAxYWVnB1NQUBgYGMDAwUBlTcR015aKKsbExr7YmaqC8vb3x66+/AngyCUHFL5yKj729vfWSHzUdEokEisuP/vjjD3F5QUEBsrKylOKI6sLX1xd79+4F8GQKcE9PT3GmwgsXLojXoFXu5kq1o/aR6OzsbLRp00Z8/MMPP+Dll18WHw8aNAi3b9+uUzKPHj3CX3/9hVatWsHb2xtGRkY4efKk2H7t2jXcuXMHPj4+AJ5c8HP58mWl0xLHjx9Xmhfex8dHaR2KGMU6ZDIZvL29lWLkcjlOnjwpxqiTCxE1LhV/OKs6YqMqjqg22rdvr9U4oupcv35dvH/hwgXs3r0bn332GXbv3q00iEPFOKo9tYtoW1tb3Lt3D8CTIvP3339XGpWipKQEmg708c477+DHH3/E7du3cfbsWfzrX/+CgYEBXn31VVhbW2P69OkIDg7GDz/8gMTEREydOhU+Pj7idocOHQoPDw+8/vrruHjxIo4dO4YVK1Zgzpw54hHgmTNn4ubNm1i8eDFSUlIQERGBffv2YcGCBWIewcHB+Pzzz7Fnzx788ccfmDVrFgoKCjB16lQAUCsXImpczM3NtRpHVB1TU1OtxhFVp+IY99qIo6dTu4geNGgQPvjgA6SmpmLTpk2Qy+UYNGiQ2J6cnKzxr+h//vkHr776Krp06YIJEyagZcuW+PXXX2Fvbw8A+OSTTzBy5EiMHTsWL7zwApycnPDdd9+JzzcwMEBMTAwMDAzg4+OD1157DW+88QZWrVolxri6uuLw4cM4fvw4evXqhY0bN2L79u3iGNEA8Morr2DDhg1YuXIlPD09ceHCBRw9elTpYsOaciGixqXiD+ClS5eKfZ+NjIywdOlSlXFEtaGY5ltbcUTVURzMdHR0hJ2dnVKbnZ2dWNfocXTjJkXtcaJv376Nl156CX/99RcMDAzw6aefYtasWWL76NGj4erqik8++aTekm3sOE40UcMxY8YMPH78GMCTiVaGDRuGQYMG4fTp0zh69Kg44YqZmZl4MQ5RbVSe2KJjx44YP3489u/fj7/++kupjTPKUV0cPnwYUVFRAAAvLy+MHj0aLi4uSE1NxYEDB8RJfwIDA+Hv76/PVBs0des1tS8sbN++Pf744w9cvXoV9vb2cHZ2VmoPDQ1V6jNNRNSQFRUViffLysoQExOjNAKRqjgibfjrr7/w0Ucf6TsNaoIsLS3F+4IgVLmpiqPa02i6GkNDQ/Tq1UtlW3XLiYgaIhMTEzx+/BhmZmYwNjbGw4cPxbYWLVqguLgYjx8/homJiR6zpKbG2NgYxcXF1T4mqotHjx6J95OTk5UuJpTJZCrjqPbULqLHjBmjcrm1tTU6d+6MGTNmiH2ZiYgaunXr1iEoKAiPHz8Wu3UoVCyo161bp+vUqIlp0aKFuE9VLpgrPm7RooVO86KmR9H1oF27digoKFCabMXa2hpmZmb4+++/2aVUS9Quoq2trVUuz8nJweeff47169fjp59+Qvfu3bWWHDVvcrkcKSkp4vjc7u7ukEr1PlM9NRG2trZK4/eqIpFIYGtrq8OsqCnq3bt3laFWq4sjqgvF36u///4bXl5e8Pf3F892XLp0SewTzb9r2qF2Eb1r165q2+RyOd58800sW7YM33//vVYSo+YtISEBUVFRShMR2NvbIzAwUGnqeaLaKisrq/EKdUEQUFZWBkNDjXq+ESkZPny4WkX08OHDdZANNWXu7u6wt7eHpaUl/v77b7FoBp4Uzh06dEB+fj7c3d31mGXToZXDelKpFG+//TYSExO1sTpq5hISEhAeHg4XFxeEhoZi586dCA0NhYuLC8LDw6vMUklUG6ouIqxLHFF1li1bptU4oupIpVIEBgbi5s2bePDggVLbgwcPcPPmTQQGBvKsrpZo7VU0Nzev0q+QSFNyuRxRUVHw8vJCcHAw3NzcYGJiAjc3NwQHB8PLywtRUVGQy+X6TpUaubNnz2o1jqg6paWlWo0jepo///wTQNVp5BWPFe1Ud1oroo8fP47OnTtra3XUTKWkpCArKwujRo2q8ktZKpUiICAAWVlZSElJ0VOG1FSoO3Qdh7gjosairKwMsbGxsLa2xq5du7BixQoEBQVhxYoV2LVrF6ytrREbGyuOg091o3ZHv0OHDqlcnpubi8TERGzfvp0TElCd5eTkAABcXFxUtiuWK+KIaqvyqc6OHTtiwoQJ2Ldvn9IEGJXjiIgaqri4OMjlcowfPx4ymQweHh5K7ePGjcOOHTsQFxeHESNG6CnLpkPtInr06NEql1taWqJLly7Yvn07Jk6cqK28qJmysbEBAKSmpsLNza1Ke2pqqlIcUW1V7BJkZmaGQYMGoXXr1hg0aBDu3bsndk9j1yEiaiwyMzMBVD/Si5eXl1Ic1Y3aRTS/SEgXFFcWHzx4EMHBwUpdOuRyOQ4dOgR7e3teWUxa9fjxY+zYsUPfaRAR1YmDgwMA4Pz583jhhRcQFxeHzMxMODg4YOjQoeJoHYo4qhuO20QNiuLK4vDwcISFhSEgIAAuLi5ITU3FoUOHkJSUhHnz5vHKYqqzmsaIrhhHRNQYDB06FNHR0fjiiy+qdLHdu3cvZDIZpFIphg4dqqcMmxYW0dTg9O3bF/PmzUNUVBRCQkLE5fb29pg3bx7HiSataNWqFdLS0pSWSaXSKmfdWrVqpcu0iIhqzdDQEO3bt8fNmzdVtpeUlKBDhw4c+15L+CpSg9S3b1/06dOHMxZSvQkKCsK7776rtExVt7WgoCBdpUREVCdlZWXVFtAKN2/e5CRSWsJXkBosqVRa5cpiIm0JDQ1VO+5pM7YS1cTExEStoRJNTEx0kA01ZUeOHBHv9+rVC05OTigtLYWRkRHS09Nx8eJFMe7ll1/WV5pNBg/rUYNVVFSEDRs2YMmSJdiwYQPH6yWtKikp0WocUXU42QrpimLm6NatW2PevHkoLy9HVlYWysvLMW/ePDg7OyvFUd3U+kh0ZmYmMjMzq5z+7NmzZ52TIlqxYoXSKanU1FRMmzYNHTp0wOrVq/WYGTUVUqkU5eXlasUR1QX3NdIVxdCcxcXFmDZtmrj88uXLOHHiBFq2bKkUR3Wj8Sc2MTER3bt3R6tWrdCzZ094enrCy8tL/JeorioX0BXdvHkTK1as0HFG1BQ9++yzWo0jqk51k0fVNo6oOm3btgUAZGdnq2y/f/++UhzVjcZHoqdNm4bOnTtjx44dcHR05PBPpFVFRUViAS2TyZROpSse37x5E0VFRew/SHVy9epVrcYRVafyQQEzMzPY2dkhOztb6YhgTReEEdWkf//+OHv2rFpxVHcaF9E3b97Et99+i06dOtVHPtTMbd68Wbzv7u6O4uJiPHr0CBYWFjA2NsalS5fEuEWLFukrTWoC1J06nlPMk7Y9fvwYd+7c0Xca1ASdP39e7bjqZjUk9WlcRL/44ou4ePEii2iqF4ppvWUymVgwV6Q4Gq2IIyIioifUPZvBsx7aoXERvX37dkyePBlXrlxB9+7dYWRkpNQeEBCgteSo+VGMW1lSUgKJRAJHR0dYWFjg0aNHyMjIELt3cHxLIiIiZYpZWCUSCWxtbcU+0ADQsmVLPHjwAIIgqDVbK9VM40okPj4eZ86cURqLUEEikah1BTJRdXr16oX09HQAT/4YKO6riiMiagyeeeYZ/Pbbb2rFEdWFmZkZAFRbJCuWK+KobjQenWPu3Ll47bXXcO/ePcjlcqUbC2iqq7/++kvpcevWrbFgwQK0bt36qXFEmlK3Sxq7rlFdJScnazWOqDoVi+P79+/DyckJHTt2hJOTk9JRaRbR2qHxkej79+9jwYIFcHR0rI98qJkrLCxUenz37l188sknNcYRaUomk2k1jqg6BQUFWo0jqk7nzp2VJlKp7mxu586ddZVSk6bxkegxY8bghx9+qI9ciFBcXCzer1y8VHxcMY6oNnh0kIiamvbt22s1jp5O4yPRnTt3xrJly/DLL7+gR48eVS4sfPvtt7WWHDU/9vb24iDx5ubmSuNEW1hY4MGDB2IcERER/c/Dhw+1GkdPV6vROSwsLPDjjz/ixx9/VGqTSCQsoqlOWrdujT/++APAkw95+/bt4ejoiIyMDNy+fVspjoiIiP4nISFB7bgXXnihnrNp+jQuom/dulUfeRABAF577TWcOHFCfHz79m2l4rliHBEREf1PUVGRVuPo6TTuE61QUlKCa9euoaysTJv5UDMnk8nQoUOHp8Z06NCBF3sRERFVUrELpDbi6Ok0LqIfP36M6dOnw8zMDN26dROnLp07dy4++ugjrSdIzYtcLq/xbMetW7cgl8t1lBERERFRVRoX0cuWLcPFixdx+vRpmJiYiMt9fX3x9ddfazU5an4SExNrnElJEASlIXyIiIgIyM/PV3rcsmVLDB8+HC1btnxqHNWOxkX0gQMHsGXLFgwYMAASiURc3q1bN06AQXW2e/dupccdO3bEsmXL0LFjx6fGERERNXcZGRlKj+/fv48jR44oTbSiKo5qR+MiOisrCw4ODlWWFxQUKBXVmvroo48gkUgwf/58cVlRURHmzJmDli1bwsLCAmPHjq3yxt+5cwf+/v4wMzODg4MDFi1aVKWf9unTp9G7d28YGxujU6dOKguwrVu3on379jAxMUG/fv2qXOGqTi5Ud48fPxbvf/bZZ/jggw/Qo0cPfPDBB/jss89UxhEREZEyKysruLu7o0uXLnB3d4eVlZW+U2pyNC6i+/Tpg8OHD4uPFYXz9u3b4ePjU6skfvvtN/znP/9Bz549lZYvWLAA33//Pfbv348ff/wRaWlpGDNmjNheXl4Of39/lJSU4OzZs9izZw92796NlStXijG3bt2Cv78/Bg8ejAsXLmD+/PmYMWMGjh07JsZ8/fXXCA4Oxvvvv4/z58+jV69e8PPzQ2Zmptq5kHYofgBJJJIq05JWfMwLWomIiJRVPJiZl5eHlJQUXLt2DSkpKcjLy1MZR7Wn8RB3H374IYYPH47k5GSUlZUhPDwcycnJOHv2bJVxo9Xx6NEjBAYG4vPPP8fq1avF5bm5udixYweio6MxZMgQAMCuXbvQtWtX/Prrr3j22WcRFxeH5ORknDhxAo6OjvD09MQHH3yAJUuWICQkBDKZDJGRkXB1dcXGjRsBAF27dsUvv/yCTz75BH5+fgCAsLAwvPnmm5g6dSoAIDIyEocPH8bOnTuxdOlStXIh7ZDJZCgsLIQgCPj4448xduxYuLi4IDU1Fd9++61SHBERUUNXXFyMtLQ0nWyrQ4cOanWt7dChg86GLHZ2doaxsbFOtqVrGhfRAwYMwIULF/DRRx+hR48eiIuLQ+/evREfH48ePXponMCcOXPg7+8PX19fpSI6MTERpaWl8PX1FZe5u7ujbdu2iI+Px7PPPitu09HRUYzx8/PDrFmzcPXqVXh5eSE+Pl5pHYoYRbeRkpISJCYmYtmyZWK7VCqFr68v4uPj1c6FtMPW1hZ3794FAFy+fBmXL1+uNo6IiKihS0tLw/Lly/WdhpK//vpLZzmtWbMGrq6uOtmWrmlcRANPLvb6/PPP67zxr776CufPn8dvv/1WpS09PR0ymQw2NjZKyx0dHZGeni7GVCygFe2KtqfF5OXlobCwEA8fPkR5ebnKmJSUFLVzUaW4uBjFxcXi44qnUki1999/H2+99ZZacURERA2ds7Mz1qxZo7PtRUREiAejVGndujVmz56ts3ycnZ11ti1dq1URrQ2pqamYN28ejh8/rjRUXlOydu1ahIaG6juNRsXCwgLW1tbIzc0FABgZGUEqlUIul6O0tBQAYG1tDQsLC32mSUREpBZjY2OdHoldv349VqxYgZs3b1Zp69Chg9JZf6qbWs9YWFeJiYnIzMxE7969YWhoCENDQ/z444/49NNPYWhoCEdHR5SUlCAnJ0fpeRkZGXBycgIAODk5VRkhQ/G4phgrKyuYmprCzs4OBgYGKmMqrqOmXFRZtmwZcnNzxVtqaqp6L04zt23bNlhbWwMASktLUVxcrFRAb9u2TZ/pERERNWirV6/Gzp070bVrVwBPrgfbuXMnC2gt01sR/eKLL+Ly5cu4cOGCeOvTpw8CAwPF+0ZGRjh58qT4nGvXruHOnTviKCA+Pj64fPmy0igax48fh5WVFTw8PMSYiutQxCjWIZPJ4O3trRQjl8tx8uRJMcbb27vGXFQxNjaGlZWV0o3UM3Xq1CrdZ2xsbMSLP4mIiKh6JiYmeO211wAAr732WpM9669PeuvOYWlpie7duystMzc3R8uWLcXl06dPR3BwMGxtbWFlZYW5c+fCx8dHvJBv6NCh8PDwwOuvv45169YhPT0dK1aswJw5c8QrQWfOnIktW7Zg8eLFmDZtGk6dOoV9+/YpDdMXHByMyZMno0+fPujbty82bdqEgoICsWCztrauMRfSnoSEBISHh8PLywujRo0SR+c4ePAgwsPDMW/ePPTt21ffaRIREVEzVqci+p9//gEAtGnTRivJVPbJJ59AKpVi7NixKC4uhp+fHyIiIsR2AwMDxMTEYNasWfDx8YG5uTkmT56MVatWiTGurq44fPgwFixYgPDwcLRp0wbbt28Xh7cDgFdeeQVZWVlYuXIl0tPT4enpiaNHjypdbFhTLqQdcrkcUVFR8PLyQnBwMKTSJydL3NzcEBwcjLCwMERFRaFPnz5iGxEREZGuaVxEy+VyrF69Ghs3bsSjR48APDmqvHDhQixfvrxOhc3p06eVHpuYmGDr1q3YunVrtc9p164dYmNjn7reQYMGISkp6akxQUFBCAoKqrZdnVyo7lJSUpCVlYWgoKAq+5JUKkVAQABCQkKQkpIidtkhIiIi0jWNi+jly5djx44d+Oijj/Dcc88BAH755ReEhISgqKhIp8O4UNOjuHjTxcVFZbtieeWLPImIiIh0SeMies+ePdi+fTsCAgLEZT179hTHHWQRTXWhuJgwNTUVbm5uVdoVI5xUvuiQiIiISJc07nvx4MEDuLu7V1nu7u6OBw8eaCUpar7c3d1hb2+PgwcPoqSkBLGxsdi9ezdiY2NRUlKCQ4cOwd7eXuU+SERERKQrGh+J7tWrF7Zs2YJPP/1UafmWLVvQq1cvrSVGzZNUKkVgYCA2bdqEKVOmKLXt3bsXADB//nxeVEh1ZmpqisLCQrXiiIiIKtO4iF63bh38/f1x4sQJcYzk+Ph4pKam1niBH5E6/vzzzxrbOcQd1VVZWZlW44iIqHnR+HDewIEDcf36dfzrX/9CTk4OcnJyMGbMGFy7dg3PP/98feRIzUhZWRliY2Mhk8lUjs4hk8kQGxvLwobqTDELprbiiIioeanVONHOzs68gJDqRVxcHORyOUpKSmBlZYUBAwbA0dERGRkZ+OWXX5CXlyfGjRgxQs/ZEhERUXOlVhF96dIldO/eHVKpFJcuXXpqbM+ePbWSGDVP6enpAJ70QzU0NFTqImRrayv2Y1XEEREREemDWkW0p6cn0tPT4eDgAE9PT0gkEgiCUCVOIpGgvLxc60lS86EY4aWwsLDKRV8VR3/hSDBERESkT2oV0bdu3YK9vb14n6i+tGjRQqtxRERERPVBrSK6Xbt2AJ5cYBMaGor33nsPrq6u9ZoYEREREVFDpdHoHEZGRvj222/rKxciFBQUaDWOiIiIqD5oPMTd6NGjceDAgXpIhUj97kLsVkRERET6pPEQd25ubli1ahXOnDkDb29vmJubK7W//fbbWkuOmp+MjAytxhERERHVB42L6B07dsDGxgaJiYlITExUapNIJCyiSWt69OgBZ2dnlJaWwsjICGlpabh8+bK+0yIiIiLSvIjmaXTSlcuXL7NoJiIiogZJ4z7RRPXpmWee0WocERERUX2o1bTf//zzDw4dOoQ7d+6gpKREqS0sLEwriVHz1KVLF/z2229qxRERERHpS41F9KVLl9CjRw9IJBIAwMmTJxEQEICOHTvi6tWreOaZZ5CcnAwDAwN4eXnVe8LUtL3wwgvYu3evWnFERERE+lJjER0XF4cVK1Zg3759MDExwbJly7BkyRKsXLkSUqkUv/76K3JychAYGIiRI0fqImdqwiIjI9WOe+edd+o5GyJqqoqLi5GWlqbvNKrQ1XVHzs7OMDY21sm2iJqqGovohQsXorCwEIMHD0Z8fDz++OMP/N///R8AwMDAAEVFRbCxscGaNWswevRozJo1q96Tpqbr77//Fu9LJBIIgqDyccU4IiJNpaWlYfny5fpOowpd5bRmzRrOPExURzUW0RKJBO+99x4GDx4MADA3Nxf7QTs7O+PGjRvo0aMHACA7O7seU6Xm4P79+wCe7Hd79uxBXFwcMjMz4eDggKFDh2Ly5MkQBEGMIyKqDWdnZ6xZs0Yn29KkMNZVTs7OzjrZDlFTpvaFhQMGDAAAPPvss/jll1/QtWtX+Pv7Y/LkyRg/fjy+/vpr+Pj41Fui1LwIgoCysjKMGDFCXFZUVKR0ZJqIqLaMjY11diQ2LCwMwcHBasU5OTnpICMi0gaNR+cICwvDo0ePAAAff/wxgoODER0djS5dunBkDqozAwMDlJeXAwCmT5+O/v37Y/jw4Thy5AjOnj2rFEdE1BioWxizgCZqXDQuojt06CDet7S0xOeff67VhKh5W79+vXjERhAEnDlzBmfOnFEZR0TUWERHR2PSpElPbSeixqVW40QT1RdVR2KsrKyQl5dXYxwRUUMWHR2N9PR0vPPOO5DL5ZBKpdiwYQP/nhE1UmrNWNiiRQvY2tqqdSOqq8pHZCoX0DxiQ0SNlZOTEz744AMAwAcffMACmqgRU+tI9KZNm+o5DSJliiM2ixYtQnl5OQwMDLB+/Xp+4RAREVGDoFYRPXny5PrOg6gKJycnfPnll/pOg4iIiKiKOvWJLioqEseMVrCysqpTQkQKZWVlVcaJNjRkN34iIiLSP40rkoKCAixZsgT79u1TOeGFYngyorqIjo5GbGws5HK50rIRI0Y89Qp3IiIiIl1Q68LCihYvXoxTp05h27ZtMDY2xvbt2xEaGgpnZ2d88cUX9ZEjNTPR0dGIiYmBpaUlZsyYgYiICMyYMQOWlpaIiYnhhYVERESkdxoX0d9//z0iIiIwduxYGBoa4vnnn8eKFSvw4YcfIioqqj5ypGakrKwMsbGxsLa2xubNmzFkyBDY2NhgyJAh2Lx5M6ytrREbG4uysjJ9p0pERETNmMZF9IMHD8QJV6ysrPDgwQMAT6YF/+mnn7SbHTU7cXFxkMvlGD9+PP755x9MmjRJvP3zzz8YN24c5HI54uLi9J0qERERNWMaF9EdOnTArVu3AADu7u7Yt28fgCdHqG1sbDRa17Zt29CzZ09YWVnBysoKPj4+OHLkiNheVFSEOXPmoGXLlrCwsMDYsWORkZGhtI47d+7A398fZmZmcHBwwKJFi6ocpTx9+jR69+4NY2NjdOrUCbt3766Sy9atW9G+fXuYmJigX79+SEhIUGpXJxequ8zMTADA9u3b8e677yq1vfvuu9ixY4dSHBEREZE+aFxET506FRcvXgQALF26FFu3boWJiQkWLFiARYsWabSuNm3a4KOPPkJiYiJ+//13DBkyBKNGjcLVq1cBAAsWLMD333+P/fv348cff0RaWhrGjBkjPr+8vBz+/v4oKSnB2bNnsWfPHuzevRsrV64UY27dugV/f38MHjwYFy5cwPz58zFjxgwcO3ZMjPn6668RHByM999/H+fPn0evXr3g5+enVKjVlAtph4ODQ5VlPXr0UCuOiIiISFckgiAIdVnB7du3cf78eXTq1Ak9e/asc0K2trZYv349xo0bB3t7e0RHR2PcuHEAgJSUFHTt2hXx8fF49tlnceTIEYwcORJpaWlwdHQEAERGRmLJkiXIysqCTCbDkiVLcPjwYVy5ckXcxsSJE5GTk4OjR48CAPr164dnnnkGW7ZsAQDI5XK4uLhg7ty5WLp0KXJzc2vMRR15eXmwtrZGbm4uhwKsxp9//in+CDIzM8Pjx4/FtoqPV61ahU6dOuklR2oaNBnlhRezkjbdunULy5cvx5o1a+Dq6qrvdKgJ475WO+rWa3UedLd9+/Zo3759XVeD8vJy7N+/HwUFBfDx8UFiYiJKS0vh6+srxri7u6Nt27Zi4RofH48ePXqIBTQA+Pn5YdasWbh69Sq8vLwQHx+vtA5FzPz58wEAJSUlSExMxLJly8R2qVQKX19fxMfHA4BauahSXFyM4uJi8XHl6aupqopnESoW0JUfr1y5koVNE1RcXIy0tDR9p1GFogtbfXN2doaxsbFOtkVERHWjdhEdHx+P+/fvY+TIkeKyL774Au+//z4KCgowevRobN68WeMvgMuXL8PHxwdFRUWwsLDAf//7X3h4eODChQuQyWRV+lk7OjoiPT0dAJCenq5UQCvaFW1Pi8nLy0NhYSEePnyI8vJylTEpKSniOmrKRZW1a9ciNDRUvReCiJCWlobly5frO40qdJUTjxYRETUeahfRq1atwqBBg8Qi+vLly5g+fTqmTJmCrl27Yv369XB2dkZISIhGCXTp0gUXLlxAbm4uvvnmG0yePBk//vijRutoqJYtW4bg4GDxcV5eHlxcXPSYUeNiYGAAOzs78XF2djYn82ninJ2dsWbNGp1sS5PCWFc5OTs762Q7RERUd2oX0RcuXMAHH3wgPv7qq6/Qr18/fP755wAAFxcXvP/++xoX0TKZTOzb6u3tjd9++w3h4eF45ZVXUFJSgpycHKUjwBkZGXBycgIAODk5VRlFQzFiRsWYyqNoZGRkwMrKCqampjAwMICBgYHKmIrrqCkXVYyNjXlqVkNt27bFnTt3ADzp4lPdCCht27bVZVqkI8bGxg3ySGxDzImIiPRL7dE5Hj58qNTl4ccff8Tw4cPFx8888wxSU1PrnJBcLkdxcTG8vb1hZGSEkydPim3Xrl3DnTt34OPjAwDw8fHB5cuXlUbROH78OKysrODh4SHGVFyHIkaxDplMBm9vb6UYuVyOkydPijHq5ELaoRh3XFtxRNVRt089+94TEZEqahfRjo6O4sU1JSUlOH/+vNIFdfn5+TAyMtJo48uWLcNPP/2E27dv4/Lly1i2bBlOnz6NwMBAWFtbY/r06QgODsYPP/yAxMRETJ06FT4+PuJ2hw4dCg8PD7z++uu4ePEijh07hhUrVmDOnDniEeCZM2fi5s2bWLx4MVJSUhAREYF9+/ZhwYIFYh7BwcH4/PPPsWfPHvzxxx+YNWsWCgoKMHXqVABQKxfSDnX3IU33NSJVaiqQWUATEVF11O7OMWLECCxduhQff/wxDhw4ADMzMzz//PNi+6VLl9CxY0eNNp6ZmYk33ngD9+7dg7W1NXr27Iljx47hpZdeAgB88sknkEqlGDt2LIqLi+Hn54eIiAjx+QYGBoiJicGsWbPg4+MDc3NzTJ48GatWrRJjXF1dcfjwYSxYsADh4eFo06YNtm/fDj8/PzHmlVdeQVZWFlauXIn09HR4enri6NGjSkfea8qFtKNFixZ4+PChWnFE2hAdHa1yuDsW0ERE9DRqjxOdnZ2NMWPG4JdffoGFhQX27NmDf/3rX2L7iy++iGeffVZnF+A0RhwnumbBwcFPHfFEwcnJCWFhYTrIiJoLjqdKusJ9jXSF+1rtaH2caDs7O/z000/Izc2FhYUFDAwMlNr3798PCwuL2mdMhKpjQ9c1joiIiKg+aDzZirW1tcrltra2dU6GKD8/X6txRERERPWhzjMWEmlT5d5FFS8gLC0trTaOiIiISJdYRFODVrFwJiIiImoo1B7ijkgXTExMtBpHREREVB9YRFODYmZmptU4IiIiovrAIpoaFE62QkRERI0Bi2hqULKysrQaR0RERFQfWERTgyKXy7UaR0RERFQfWEQTEREREWmIRTQRERERkYZYRBMRERERaYhFNBERERGRhlhEExERERFpiNN+ExERUZOXnZ2N/Px8faehU3fv3lX6tzmxtLSEnZ1dvW6DRTQRERE1adnZ2Xhn4TsoKS3Rdyp6ERERoe8UdE5mJMOGjRvqtZBmEU1ERERNWn5+PkpKSzC2yxDYm9noOx2qZ1mPc/DttVPIz89nEU1ERERUV/ZmNnC2sNd3GtRE8MJCIiIiIiINsYgmIiIiItIQi2giIiIiIg2xiCYiIiIi0hCLaCIiIiIiDbGIJiIiIiLSEItoIiIiIiINsYgmIiIiItIQi2giIiIiIg2xiCYiIiIi0hCLaCIiIiIiDRnqOwFq+IqLi5GWlqbvNKq4deuWTrbj7OwMY2NjnWyLiIiIGgcW0VSjtLQ0LF++XN9pVKGrnNasWQNXV1edbIuIiIgaBxbRVCNnZ2esWbNGJ9sKCwvD/fv3a4xr2bIlgoODdZDRk/8/ERERUUUsoqlGxsbGOjsSu3HjRkyZMkWtOJlMVv8JEVG9ys7ORn5+vr7T0Km7d+8q/ducWFpaws7OTt9pEGmFXovotWvX4rvvvkNKSgpMTU3Rv39/fPzxx+jSpYsYU1RUhIULF+Krr75CcXEx/Pz8EBERAUdHRzHmzp07mDVrFn744QdYWFhg8uTJWLt2LQwN//ffO336NIKDg3H16lW4uLhgxYoVVYq1rVu3Yv369UhPT0evXr2wefNm9O3bV6NcqG5kMhm8vb2RmJhYbYy3tzcLaKImIDs7GwvfeQelJSX6TkUvIiIi9J2CzhnJZNi4YQMLaWoS9FpE//jjj5gzZw6eeeYZlJWV4d1338XQoUORnJwMc3NzAMCCBQtw+PBh7N+/H9bW1ggKCsKYMWNw5swZAEB5eTn8/f3h5OSEs2fP4t69e3jjjTdgZGSEDz/8EMCTC9D8/f0xc+ZMREVF4eTJk5gxYwZatWoFPz8/AMDXX3+N4OBgREZGol+/fti0aRP8/Pxw7do1ODg4qJULacfChQuxceNGlYW0t7c3Fi5cqIesiEjb8vPzUVpSApvnesLQ2lzf6VA9K8stQM6ZS8jPz2cRTU2CXovoo0ePKj3evXs3HBwckJiYiBdeeAG5ubnYsWMHoqOjMWTIEADArl270LVrV/z666949tlnERcXh+TkZJw4cQKOjo7w9PTEBx98gCVLliAkJAQymQyRkZFwdXXFxo0bAQBdu3bFL7/8gk8++UQsosPCwvDmm29i6tSpAIDIyEgcPnwYO3fuxNKlS9XKhbRn4cKFKCkpwbZt23Du3Dn069cPs2bN4hFooibI0NocRi2t9Z0GEZFGGtQ40bm5uQAAW1tbAEBiYiJKS0vh6+srxri7u6Nt27aIj48HAMTHx6NHjx5KXSr8/PyQl5eHq1evijEV16GIUayjpKQEiYmJSjFSqRS+vr5ijDq5kHbJZDIEBAQAAAICAlhAExERUYPRYC4slMvlmD9/Pp577jl0794dAJCeng6ZTAYbGxulWEdHR6Snp4sxlfskKx7XFJOXl4fCwkI8fPgQ5eXlKmNSUlLUzqWy4uJiFBcXi4/z8vJqehmIiIiIqBFoMEei58yZgytXruCrr77Sdypas3btWlhbW4s3FxcXfadERERERFrQIIrooKAgxMTE4IcffkCbNm3E5U5OTigpKUFOTo5SfEZGBpycnMSYjIyMKu2KtqfFWFlZwdTUFHZ2djAwMFAZU3EdNeVS2bJly5CbmyveUlNT1Xg1iIiIiKih02sRLQgCgoKC8N///henTp2qMhaxt7c3jIyMcPLkSXHZtWvXcOfOHfj4+AAAfHx8cPnyZWRmZooxx48fh5WVFTw8PMSYiutQxCjWoRhWrWKMXC7HyZMnxRh1cqnM2NgYVlZWSjciIiIiavz02id6zpw5iI6OxsGDB2FpaSn2Lba2toapqSmsra0xffp0BAcHw9bWFlZWVpg7dy58fHzE0TCGDh0KDw8PvP7661i3bh3S09OxYsUKzJkzB8bGxgCAmTNnYsuWLVi8eDGmTZuGU6dOYd++fTh8+LCYS3BwMCZPnow+ffqgb9++2LRpEwoKCsTROtTJhYiIiBqurMcP9Z0C6YCu3me9FtHbtm0DAAwaNEhp+a5du8SJUD755BNIpVKMHTtWaYITBQMDA8TExGDWrFnw8fGBubk5Jk+ejFWrVokxrq6uOHz4MBYsWIDw8HC0adMG27dvF4e3A4BXXnkFWVlZWLlyJdLT0+Hp6YmjR48qXWxYUy5ERETUcH177Qd9p0BNiF6LaEEQaowxMTHB1q1bsXXr1mpj2rVrh9jY2KeuZ9CgQUhKSnpqTFBQEIKCguqUCxERETVMY7sMhr1ZC32nQfUs6/FDnfxgajBD3BERERHVJ3uzFnC2sNd3GtRENIjROYiIiIiIGhMW0UREREREGmJ3DiKqIjs7G/n5+fpOQ6fu3r2r9G9zYmlpCTs7O32nQUTUqLCIJiIl2dnZeGfhQpSUluo7Fb1ojiPuyIyMsGHjRhbSREQaYBFNREry8/NRUlqK17rYwtGMfyKauozHZdh77QHy8/NZRBMRaYDfkESkkqOZIVwsZPpOg4iIqEHihYVERERERBpiEU1EREREpCEW0UREREREGmKfaCIi0quy3Ef6ToF0gO8zNTUsoomISK9yzlzWdwpERBpjEU1ERHpl81wPGFpb6DsNqmdluY/4g4maFBbRRESkV4bWFjBqaa3vNIiINMILC4mIiIiINMQimoiIiIhIQyyiiYiIiIg0xD7RRERE1CxkPc7RdwqkA7p6n1lEExERUZNmaWkJmZEM3147pe9USEdkRjJYWlrW6zZYRBMREVGTZmdnhw0bNyA/P1/fqejU3bt3ERERgdmzZ6N169b6TkenLC0tYWdnV6/bYBFNRERETZ6dnV29F1UNVevWreHq6qrvNJocXlhIRERERKQhFtFERERERBpiEU1EREREpCH2iSYilTIel+o7BdIBvs9ERLXDIpqIVNp77aG+UyAiImqwWEQTkUqvdWkBRzMjfadB9SzjcSl/MBER1QKL6EYkOzu7WY5xWfHf5kQXY1w+jaOZEVwsZHrbPjUfZbkF+k6BdIDvMzU1LKIbiezsbCx85x2UlpToOxW9iIiI0HcKOmckk2Hjhg3NdlxTavosLS1hJJMh58wlfadCOmIkq/9Z5Ih0hUV0I5Gfn4/SkhJ07uULM4sW+k6H6tnjRw9x/eIJ5Ofns4imJsvOzg4bN3AWueZE32fYiLSJRXQjY2bRAhbW9vpOg4hIKziLHGeRI2qsOE40EREREZGGWEQTEREREWmIRTQRERERkYb0WkT/9NNPePnll+Hs7AyJRIIDBw4otQuCgJUrV6JVq1YwNTWFr68vbty4oRTz4MEDBAYGwsrKCjY2Npg+fToePXqkFHPp0iU8//zzMDExgYuLC9atW1cll/3798Pd3R0mJibo0aMHYmNjNc6FiIiIiJoHvRbRBQUF6NWrF7Zu3aqyfd26dfj0008RGRmJc+fOwdzcHH5+figqKhJjAgMDcfXqVRw/fhwxMTH46aef8NZbb4nteXl5GDp0KNq1a4fExESsX78eISEh+Oyzz8SYs2fP4tVXX8X06dORlJSE0aNHY/To0bhy5YpGuRARERFR86DX0TmGDx+O4cOHq2wTBAGbNm3CihUrMGrUKADAF198AUdHRxw4cAATJ07EH3/8gaNHj+K3335Dnz59AACbN2/GiBEjsGHDBjg7OyMqKgolJSXYuXMnZDIZunXrhgsXLiAsLEwstsPDwzFs2DAsWrQIAPDBBx/g+PHj2LJlCyIjI9XKhYiIiIiajwbbJ/rWrVtIT0+Hr6+vuMza2hr9+vVDfHw8ACA+Ph42NjZiAQ0Avr6+kEqlOHfunBjzwgsvQCb738xrfn5+uHbtGh4+fCjGVNyOIkaxHXVyUaW4uBh5eXlKNyIiIiJq/BpsEZ2eng4AcHR0VFru6OgotqWnp8PBwUGp3dDQELa2tkoxqtZRcRvVxVRsrykXVdauXQtra2vx5uLiUsP/moiIiIgagwZbRDcFy5YtQ25urnhLTU3Vd0pEREREpAUNdsZCJycnAEBGRgZatWolLs/IyICnp6cYk5mZqfS8srIyPHjwQHy+k5MTMjIylGIUj2uKqdheUy6qGBsbw9jYWK3/L1FDk/G4TN8pkA7wfSYiqp0GW0S7urrCyckJJ0+eFAvVvLw8nDt3DrNmzQIA+Pj4ICcnB4mJifD29gYAnDp1CnK5HP369RNjli9fjtLSUhgZGQEAjh8/ji5duqBFixZizMmTJzF//nxx+8ePH4ePj4/auRA1FZaWlpAZGWHvtQf6ToV0RGZkBEtLS32nQUTUqOi1iH706BH+/PNP8fGtW7dw4cIF2Nraom3btpg/fz5Wr14NNzc3uLq64r333oOzszNGjx4NAOjatSuGDRuGN998E5GRkSgtLUVQUBAmTpwIZ2dnAMCkSZMQGhqK6dOnY8mSJbhy5QrCw8PxySefiNudN28eBg4ciI0bN8Lf3x9fffUVfv/9d3EYPIlEUmMuRE2FnZ0dNmzciPz8fH2nolN3795FREQEZs+ejdatW+s7HZ2ytLSEnZ2dvtMgImpU9FpE//777xg8eLD4ODg4GAAwefJk7N69G4sXL0ZBQQHeeust5OTkYMCAATh69ChMTEzE50RFRSEoKAgvvvgipFIpxo4di08//VRst7a2RlxcHObMmQNvb2/Y2dlh5cqVSmNJ9+/fH9HR0VixYgXeffdduLm54cCBA+jevbsYo04uuvD40UOdbo/0Q9/vs52dXbMtqlq3bg1XV1d9p0FERA2cXovoQYMGQRCEatslEglWrVqFVatWVRtja2uL6Ojop26nZ8+e+Pnnn58aM378eIwfP75OuejC9Ysn9Lp9IiIiImrAfaJJtc69fGFm0ULfaVA9e/zoIX8wERERNWAsohsZM4sWsLC213caRERERM0ax4kmIiIiItIQi2giIiIiIg2xiCYiIiIi0hCLaCIiIiIiDbGIJiIiIiLSEItoIiIiIiINsYgmIiIiItIQx4luZPQ9HTTpBt9nIiKiho1FdCNhaWkJI5mMs9g1I0YyGSwtLfWdBhEREanAIrqRsLOzw8YNG5Cfn6/vVHTq7t27iIiIwOzZs9G6dWt9p6NTlpaWsLOz03caREREpAKL6EbEzs6u2RZVrVu3hqurq77TICIiIgLACwuJiIiIiDTGIpqIiIiISEMsoomIiIiINMQimoiIiIhIQyyiiYiIiIg0xCKaiIiIiEhDLKKJiIiIiDTEIpqIiIiISEMsoomIiIiINMQimoiIiIhIQyyiiYiIiIg0xCKaiIiIiEhDLKKJiIiIiDTEIpqIiIiISEMsoomIiIiINMQimoiIiIhIQyyiiYiIiIg0ZKjvBKjhKy4uRlpaml62fffuXaV/9cHZ2RnGxsZ6235zwn2N+5qucF/jvqYr3Nea7r4mEQRB0HcSzUVeXh6sra2Rm5sLKysrfaejtlu3bmH58uX6TkNv1qxZA1dXV32n0SxwX+O+pivc17iv6Qr3tca3r6lbr7GI1qHGWkTr81d0Q9CUf0U3NNzXuK/pCvc17mu6wn2t8e1rLKIboMZaRBMRERE1F+rWa7ywUENbt25F+/btYWJign79+iEhIUHfKRERERGRjrGI1sDXX3+N4OBgvP/++zh//jx69eoFPz8/ZGZm6js1IiIiItIhFtEaCAsLw5tvvompU6fCw8MDkZGRMDMzw86dO/WdGhERERHpEItoNZWUlCAxMRG+vr7iMqlUCl9fX8THx6t8TnFxMfLy8pRuRERERNT4sYhWU3Z2NsrLy+Ho6Ki03NHREenp6Sqfs3btWlhbW4s3FxcXXaRKRERERPWMRXQ9WrZsGXJzc8VbamqqvlMiIiIiIi3gjIVqsrOzg4GBATIyMpSWZ2RkwMnJSeVzjI2NG93YiERERERUMx6JVpNMJoO3tzdOnjwpLpPL5Th58iR8fHz0mBkRERER6RqPRGsgODgYkydPRp8+fdC3b19s2rQJBQUFmDp1qr5TIyIiIiIdYhGtgVdeeQVZWVlYuXIl0tPT4enpiaNHj1a52JCIiIiImjZO+61DnPabiIiIqGHjtN9ERERERPWERTQRERERkYZYRBMRERERaYgXFuqQovs5p/8mIiIiapgUdVpNlw2yiNah/Px8AOD030REREQNXH5+Pqytratt5+gcOiSXy5GWlgZLS0tIJBJ9p9Mo5OXlwcXFBampqRzRhOoV9zXSFe5rpCvc12pHEATk5+fD2dkZUmn1PZ95JFqHpFIp2rRpo+80GiUrKyv+ASCd4L5GusJ9jXSF+5rmnnYEWoEXFhIRERERaYhFNBERERGRhlhEU4NmbGyM999/H8bGxvpOhZo47mukK9zXSFe4r9UvXlhIRERERKQhHokmIiIiItIQi2giIiIiIg2xiCYiIiIi0hCLaGo0Tp8+DYlEgpycHH2nQo3M7t27YWNjo+80iJ5q0KBBmD9/vr7TIALA/VEdLKKp3kyZMgWjR4/W2vr69++Pe/fuqTUAOjU/U6ZMgUQigUQigUwmQ6dOnbBq1SqUlZXpOzVqArKysjBr1iy0bdsWxsbGcHJygp+fH86cOaO1bXz33Xf44IMPtLY+ahgq/m2qeBs2bJi+UwNQ/QEq7o8144yF1GjIZDI4OTnVaR0lJSWQyWRayogammHDhmHXrl0oLi5GbGws5syZAyMjI7Rq1UrfqVEjN3bsWJSUlGDPnj3o0KEDMjIycPLkSdy/f19r27C1ta3T88vLyyGRSJ46TTHph+JvU0UNfdi5uu6PzQE/aaQT7du3x6ZNm5SWeXp6IiQkRHwskUiwfft2/Otf/4KZmRnc3Nxw6NAhsV3Vr+Vvv/0W3bp1g7GxMdq3b4+NGzdW2e4HH3yAN954A1ZWVnjrrbfq479HDYTiCGG7du0wa9Ys+Pr6Ku1DFR08eBC9e/eGiYkJOnTogNDQUKWj1jXtjwDw448/om/fvjA2NkarVq2wdOlSHvlugnJycvDzzz/j448/xuDBg9GuXTv07dsXy5YtQ0BAgBgzY8YM2Nvbw8rKCkOGDMHFixfFdYSEhMDT0xNffvkl2rdvD2tra0ycOBH5+fliTOXT5w8fPsQbb7yBFi1awMzMDMOHD8eNGzfEdkU3pUOHDsHDwwPGxsa4c+dO/b8gpDHF36aKtxYtWuD06dOQyWT4+eefxdh169bBwcEBGRkZAIDU1FRMmDABNjY2sLW1xahRo3D79m2l9e/cuVP8LmzVqhWCgoIAALdv34ZEIsGFCxfE2JycHEgkEpw+fRq3b9/G4MGDAQAtWrSARCLBlClTACjvj++++y769etX5f/Vq1cvrFq1CgAgl8uxatUqtGnTBsbGxvD09MTRo0e18fI1WCyiqUEJDQ3FhAkTcOnSJYwYMQKBgYF48OCBytjExERMmDABEydOxOXLlxESEoL33nsPu3fvVorbsGEDevXqhaSkJLz33ns6+F9QQ2FqaoqSkpIqy3/++We88cYbmDdvHpKTk/Gf//wHu3fvxpo1a5TinrY/3r17FyNGjMAzzzyDixcvYtu2bdixYwdWr16tk/8b6Y6FhQUsLCxw4MABFBcXq4wZP348MjMzceTIESQmJqJ379548cUXlf5+/fXXXzhw4ABiYmIQExODH3/8ER999FG1250yZQp+//13HDp0CPHx8RAEASNGjEBpaakY8/jxY3z88cfYvn07rl69CgcHB+39x6neKQrV119/Hbm5ueL31Pbt2+Ho6IjS0lL4+fnB0tISP//8M86cOQMLCwsMGzZM/Nu2bds2zJkzB2+99RYuX76MQ4cOoVOnTmpt38XFBd9++y0A4Nq1a7h37x7Cw8OrxAUGBiIhIQF//fWXuOzq1au4dOkSJk2aBAAIDw/Hxo0bsWHDBly6dAl+/6+9u4+pqv7jAP6+gsQFBB0hgU5wKHhRJEFSuE1SIEhFHvIJcUNEsrlC42FpPImKK6ehaTKCeTWifMoeJFSUQdI1MR+4mrthEZhOHIo4d1VI4Pv7o3nmCX7qBSy092u72/2e79M5Z2fnfPje7/kSHIwZM2bI/vB75giiJyQmJkaEhYUJIYRwcnISOTk5snxPT0+RmZkppQGItLQ0KW0wGAQAceDAASGEEOXl5QKAaG5uFkIIMW/ePBEUFCRrMyUlRbi7u0tpJycnER4e3nsHRX3Wg9dbR0eHOHz4sHjuuedEcnKy0Gg0wsbGRiobEBAg1q5dK6tfWFgoHBwcpPSjrsf33ntPuLm5iY6ODqnMxx9/LKysrER7e/sTOEL6N+3du1cMGjRImJubCz8/P7FixQqh0+mEEEJUVlYKa2tr0dLSIqvj4uIi8vLyhBBCZGZmCgsLC3Hr1i0pPyUlRUyYMEFK+/v7i6VLlwohhLhw4YIAILRarZR//fp1oVQqxe7du4UQQmg0GgFAVFdXP5Fjpt4RExMjTExMhKWlpeyTnZ0thBCitbVVvPjii2L27NnC3d1dxMfHS3ULCws73WdaW1uFUqkUhw4dEkII4ejoKFJTU7vsu66uTgAQZ86ckbY1NzcLAKK8vFwI0fnZet+D16MQfz2zV61aJaVXrFghu34dHR2lY7rPx8dHLFmy5NEn6SnFOdHUp4wdO1b6bmlpCWtrazQ2NnZZVq/XIywsTLZNrVZj48aNaG9vh4mJCQBg/PjxT26HqU8pLi6GlZUV7t27h46ODsybNw8rV67Enj17ZOV0Oh20Wq1s5Lm9vR0tLS24c+cOLCwsADz8etTr9fD19YVCoZDKqNVqGAwGXL58GcOGDXuSh0r/sNdffx3Tpk1DZWUljh8/jgMHDmDdunUoKCjA7du3YTAYYGtrK6tz9+5d2cids7MzBgwYIKUdHBween8zNTWV/YRua2sLNzc36PV6aZuZmZnsOqW+afLkycjNzZVtuz/n2MzMDEVFRRg7diycnJyQk5MjldHpdPjtt99k1w0AtLS0oLa2Fo2Njbhy5QoCAgKe+DFER0dj27ZtSE9PhxACX3zxBRITEwEAt27dwpUrV6BWq2V11Gq1bFrTs4ZBNP0j+vXrB/G3/zD/4E+S9/Xv31+WVigU6Ojo6FHflpaWPapPT4/7DyozMzM4OjrC1LTrW5zBYEBWVhYiIyM75Zmbm0vfn8T1SE8vc3NzBAUFISgoCOnp6Vi0aBEyMzOxZMkSODg4oKKiolOdB5dWfBLXk1KplP0hR32TpaXlQ6dYHDt2DABw48YN3LhxQ3puGQwGeHt7o6ioqFMdOzu7R75Eej//wedvV8/exxEVFYV3330Xp0+fxt27d3Hp0iXMmTOnW209KxhE0z/Czs4ODQ0NUvrWrVuoq6vrUZsqlarT8lJarRaurq7SKDT9tzzqQXWfl5cXampqHnveYFdUKhW+/PJLCCGkIEar1WLAgAEYOnRot9ulp4e7uzu+/vpreHl54erVqzA1NYWzs3OvtK1SqdDW1oaqqir4+fkBAJqamlBTUwN3d/de6YP6htraWrzzzjvIz8/Hrl27EBMTgyNHjqBfv37w8vLCrl27MHjwYFhbW3dZ39nZGWVlZdILgg+ys7MDADQ0NGDcuHEAIHvJEIC0YlV7e/tD93Po0KHw9/dHUVER7t69i6CgIGkOvrW1NRwdHaHVauHv7y/V0Wq1eOmllx7vRDyF+GIh/SOmTJmCwsJCVFZW4ty5c4iJielxoJuUlISysjKsXr0aFy5cwI4dO7BlyxYkJyf30l7TsyojIwOffvopsrKycP78eej1euzcuRNpaWmP3caSJUtw6dIlvP322/jll1/wzTffIDMzE4mJiVxi7BnT1NSEKVOm4LPPPsPZs2dRV1eHPXv2YN26dQgLC0NgYCB8fX0RHh6O0tJS1NfX49ixY0hNTcXJkye71efIkSMRFhaG+Ph4/PDDD9DpdJg/fz6GDBnSaRob9X2tra24evWq7HP9+nW0t7dj/vz5CA4ORmxsLDQaDc6ePSutNBUdHY3nn38eYWFhqKysRF1dHSoqKpCQkIDLly8D+Gvllw0bNuCjjz7Cr7/+itOnT2Pz5s0A/vqlYuLEiXj//feh1+vx/fffd7rPOTk5QaFQoLi4GNeuXYPBYPi/xxEdHY2dO3diz549iI6OluWlpKTggw8+wK5du1BTU4Ply5ejuroaS5cu7c1T2afwTk9PTEdHh/Rz+ooVK+Dv74/p06dj2rRpCA8Ph4uLS4/a9/Lywu7du7Fz506MGTMGGRkZWLVqlbQ8D9H/ExwcjOLiYpSWlsLHxwcTJ05ETk4OnJycHruNIUOGoKSkBCdOnICnpyfefPNNxMXFGRWI09PBysoKEyZMQE5ODiZNmoQxY8YgPT0d8fHx2LJlCxQKBUpKSjBp0iTExsbC1dUVc+fOxcWLF2Fvb9/tfjUaDby9vTF9+nT4+vpCCIGSkpJO00Ko7zt48CAcHBxkn5dffhnZ2dm4ePEi8vLyAPw1T/6TTz5BWloadDodLCwscPToUQwbNgyRkZFQqVSIi4tDS0uLNDIdExODjRs3YuvWrRg9ejSmT58uWxFj27ZtaGtrg7e3N5YtW9ZpBaEhQ4YgKysLy5cvh729vbQ8XldmzpyJpqYm3Llzp9M/U0tISEBiYiKSkpLg4eGBgwcP4ttvv8XIkSN76Sz2PQrx94mqRL0kJCQEI0aMwJYtW/7tXSEiIiLqVRyJpl7X3NyM4uJiVFRUIDAw8N/eHSIiIqJexxcLqdctXLgQP/30E5KSkjh3j4iIiJ5JnM5BRERERGQkTucgIiIiIjISg2giIiIiIiMxiCYiIiIiMhKDaCIiIiIiIzGIJiL6j9u+fTsGDhzY43YqKiqgUChw8+bNJ96Xs7MzNm7c2ON2iIi6i0E0EdF/3Jw5c3DhwoUet+Pn54eGhgbY2Nj0wl4REfVtXCeaiOg/TqlUQqlU9qiNe/fuwczMDC+88EIv7RURUd/GkWgioqfA3r174eHhAaVSCVtbWwQGBuL27dsAgIKCAqhUKpibm2PUqFHYunWrVK++vh4KhQL79u3D5MmTYWFhAU9PT/z4449Sma6mWOTm5sLFxQVmZmZwc3NDYWGhLF+hUCA3NxczZsyApaUlsrOzu5zOsX37dgwbNgwWFhaIiIhAU1OTrJ3a2lqEhYXB3t4eVlZW8PHxwZEjR2RlGhsbERoaCqVSieHDh6OoqKjT+bl58yYWLVoEOzs7WFtbY8qUKdDpdEadYyIiYzCIJiLq4xoaGhAVFYWFCxdCr9ejoqICkZGREEKgqKgIGRkZyM7Ohl6vx9q1a5Geno4dO3bI2khNTUVycjKqq6vh6uqKqKgotLW1ddnfV199haVLlyIpKQk///wzFi9ejNjYWJSXl8vKrVy5EhERETh37hwWLlzYqZ2qqirExcXhrbfeQnV1NSZPnow1a9bIyhgMBkydOhVlZWU4c+YMQkJCEBoaij/++EMqs2DBAly6dAnl5eXYu3cvtm7disbGRlk7s2bNQmNjIw4cOIBTp07By8sLAQEBuHHjhlHnmojosQkiIurTTp06JQCI+vr6TnkuLi7i888/l21bvXq18PX1FUIIUVdXJwCIgoICKf/8+fMCgNDr9UIIITQajbCxsZHy/fz8RHx8vKzNWbNmialTp0ppAGLZsmWyMuXl5QKAaG5uFkIIERUVJasjhBBz5syR9dWV0aNHi82bNwshhKipqREAxIkTJ6R8vV4vAIicnBwhhBCVlZXC2tpatLS0yNpxcXEReXl5D+2LiKi7OBJNRNTHeXp6IiAgAB4eHpg1axby8/PR3NyM27dvo7a2FnFxcbCyspI+a9asQW1trayNsWPHSt8dHBwAoNNo7n16vR5qtVq2Ta1WQ6/Xy7aNHz/+ofut1+sxYcIE2TZfX19Z2mAwIDk5GSqVCgMHDoSVlRX0er00Eq3X62Fqagpvb2+pzqhRo2TTT3Q6HQwGA2xtbWXnoa6urtN5ICLqLXyxkIiojzMxMcHhw4dx7NgxlJaWYvPmzUhNTcX+/fsBAPn5+Z2CVRMTE1m6f//+0neFQgEA6Ojo6NF+WVpa9qg+ACQnJ+Pw4cNYv349RowYAaVSiZkzZ+LPP/987DYMBgMcHBxQUVHRKa83ltMjIuoKg2gioqeAQqGAWq2GWq1GRkYGnJycoNVq4ejoiN9//x3R0dG91pdKpYJWq0VMTIy0TavVwt3d3eh2qqqqZNuOHz8uS2u1WixYsAAREREA/gqI6+vrpfxRo0ahra0Np06dgo+PDwCgpqZG9vKil5cXrl69ClNTUzg7Oxu1j0RE3cUgmoioj6uqqkJZWRleffVVDB48GFVVVbh27RpUKhWysrKQkJAAGxsbhISEoLW1FSdPnkRzczMSExO71V9KSgpmz56NcePGITAwEPv378e+ffs6rZrxKAkJCVCr1Vi/fj3CwsJw6NAhHDx4UFZm5MiR2LdvH0JDQ6FQKJCeni4bIXdzc0NISAgWL16M3NxcmJqaYtmyZbIl+QIDA+Hr64vw8HCsW7cOrq6uuHLlCr777jtEREQ8ctoJEVF3cE40EVEfZ21tjaNHj2Lq1KlwdXVFWloaNmzYgNdeew2LFi1CQUEBNBoNPDw84O/vj+3bt2P48OHd7i88PBybNm3C+vXrMXr0aOTl5UGj0eCVV14xqp2JEyciPz8fmzZtgqenJ0pLS5GWliYr8+GHH2LQoEHw8/NDaGgogoOD4eXlJSuj0Wjg6OgIf39/REZG4o033sDgwYOlfIVCgZKSEkyaNAmxsbFwdXXF3LlzcfHiRdjb23f7PBARPYxCCCH+7Z0gIiIiInqacCSaiIiIiMhIDKKJiIiIiIzEIJqIiIiIyEgMoomIiIiIjMQgmoiIiIjISAyiiYiIiIiMxCCaiIiIiMhIDKKJiIiIiIzEIJqIiIiIyEgMoomIiIiIjMQgmoiIiIjISAyiiYiIiIiM9D++928jgWwEGwAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.express as px"
      ],
      "metadata": {
        "id": "PqwgcIqW7uVz"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "OZIcTdyU74J-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 517
        },
        "id": "ae9792df",
        "outputId": "4ec05a91-13d6-4496-bd5a-1d702d8c855b"
      },
      "source": [
        "# Calculate the average salary by seniority level\n",
        "average_salary_by_seniority = df_limpo.groupby('senioridade')['salary_in_usd'].mean().reset_index()\n",
        "\n",
        "# Define the order for the x-axis\n",
        "order_experience_level = ['Junior', 'Pleno', 'Senior', 'Executivo']\n",
        "\n",
        "# Create the bar plot using Plotly Express\n",
        "fig = px.bar(average_salary_by_seniority,\n",
        "             x='senioridade',\n",
        "             y='salary_in_usd',\n",
        "             category_orders={'senioridade': order_experience_level},\n",
        "             title='Média Salarial por Nível de Senioridade',\n",
        "             labels={'senioridade': 'Senioridade', 'salary_in_usd': 'Média Salarial Anual (USD)'})\n",
        "\n",
        "# Display the plot\n",
        "fig.show()"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"59081cb9-ff58-4442-a544-b6e8600775fd\" class=\"plotly-graph-div\" style=\"height:500px; width:800px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"59081cb9-ff58-4442-a544-b6e8600775fd\")) {                    Plotly.newPlot(                        \"59081cb9-ff58-4442-a544-b6e8600775fd\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Senioridade=%{x}\\u003cbr\\u003eMédia Salarial Anual (USD)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[\"Executivo\",\"Junior\",\"Pleno\",\"Senior\"],\"xaxis\":\"x\",\"y\":[202027.6678125,99034.96326661843,143044.8459789432,172850.83830079238],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Senioridade\"},\"categoryorder\":\"array\",\"categoryarray\":[\"Junior\",\"Pleno\",\"Senior\",\"Executivo\"]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Média Salarial Anual (USD)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Média Salarial por Nível de Senioridade\"},\"barmode\":\"relative\",\"width\":800,\"height\":500},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('59081cb9-ff58-4442-a544-b6e8600775fd');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "remote_counts = df_limpo['remote_ratio'].value_counts().reset_index()\n",
        "remote_counts.columns = ['type_of_work', 'quantity']\n",
        "\n",
        "remote_mapping = {\n",
        "    0: 'Presencial',\n",
        "    50: 'Híbrido',\n",
        "    100: 'Remoto'\n",
        "}\n",
        "\n",
        "remote_counts['type_of_work'] = remote_counts['type_of_work'].map(remote_mapping)\n",
        "\n",
        "fig = px.pie(remote_counts,\n",
        "             names='type_of_work',\n",
        "             values='quantity',\n",
        "             title='Proporção dos tipos de Trabalho',\n",
        "             hole=0.5)\n",
        "fig.update_traces(textinfo='percent+label')\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "jSM4_FO08ySi",
        "outputId": "987dde4f-e46a-463b-ed3c-2af7335355d7"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"118f3de7-7f25-41ac-9b1e-5dfcac376398\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"118f3de7-7f25-41ac-9b1e-5dfcac376398\")) {                    Plotly.newPlot(                        \"118f3de7-7f25-41ac-9b1e-5dfcac376398\",                        [{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"hole\":0.5,\"hovertemplate\":\"type_of_work=%{label}\\u003cbr\\u003equantity=%{value}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"labels\":[\"Presencial\",\"Remoto\",\"Híbrido\"],\"legendgroup\":\"\",\"name\":\"\",\"showlegend\":true,\"values\":[105305,27716,318],\"type\":\"pie\",\"textinfo\":\"percent+label\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Proporção dos tipos de Trabalho\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('118f3de7-7f25-41ac-9b1e-5dfcac376398');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "3zfQbfIz_fY0"
      },
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "1de02d03",
        "outputId": "f8772b1f-4ab9-4d42-8f87-3d95dee3200e"
      },
      "source": [
        "# Filter for Data Scientists\n",
        "data_scientist_df = df_limpo[df_limpo['job_title'] == 'Data Scientist']\n",
        "\n",
        "# Calculate the average salary by country for Data Scientists\n",
        "average_salary_ds_by_country = data_scientist_df.groupby('company_location')['salary_in_usd'].mean().reset_index()\n",
        "\n",
        "# Sort the countries by average salary\n",
        "average_salary_ds_by_country = average_salary_ds_by_country.sort_values(by='salary_in_usd', ascending=False)\n",
        "\n",
        "# Create the bar plot using Plotly Express\n",
        "fig = px.bar(average_salary_ds_by_country,\n",
        "             x='company_location',\n",
        "             y='salary_in_usd',\n",
        "             title='Média Salarial para Cientistas de Dados por País',\n",
        "             labels={'company_location': 'País', 'salary_in_usd': 'Média Salarial Anual (USD)'})\n",
        "\n",
        "# Display the plot\n",
        "fig.show()"
      ],
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"fe6327a8-d735-4e08-8c4b-8c37faf10ebb\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"fe6327a8-d735-4e08-8c4b-8c37faf10ebb\")) {                    Plotly.newPlot(                        \"fe6327a8-d735-4e08-8c4b-8c37faf10ebb\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"País=%{x}\\u003cbr\\u003eMédia Salarial Anual (USD)=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[\"US\",\"SG\",\"BG\",\"CH\",\"EG\",\"CA\",\"MX\",\"NZ\",\"JP\",\"IL\",\"AU\",\"CZ\",\"IT\",\"DZ\",\"KR\",\"RU\",\"FR\",\"DE\",\"IE\",\"PT\",\"NO\",\"SE\",\"GB\",\"UA\",\"PL\",\"BR\",\"NL\",\"CL\",\"BE\",\"HK\",\"LT\",\"LV\",\"ID\",\"AD\",\"AT\",\"KE\",\"NG\",\"EE\",\"TR\",\"ES\",\"ZA\",\"FI\",\"GR\",\"IN\",\"LU\",\"RO\",\"AR\",\"SK\",\"TH\",\"HU\",\"TW\",\"EC\"],\"xaxis\":\"x\",\"y\":[162757.33058800997,158100.0,152500.0,152256.66666666666,140690.9090909091,140597.31297709924,132420.0,122929.75,121766.66666666667,119059.0,112190.0,107968.0,107558.72727272728,100000.0,99272.0,95500.0,93723.10344827586,90450.85245901639,89145.39130434782,88888.25,88462.0,87157.5,86200.0643015521,85000.0,77253.63636363637,71093.0,70070.9375,69346.0,66790.75,65058.0,62762.0,61688.5,53416.0,50745.0,50359.101694915254,50000.0,50000.0,47900.333333333336,47542.75,46184.05128205128,44871.75,43611.0,42096.333333333336,42085.346153846156,41863.0,39992.0,37500.0,30522.4,26957.0,23935.75,17282.5,16000.0],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"País\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Média Salarial Anual (USD)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Média Salarial para Cientistas de Dados por País\"},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('fe6327a8-d735-4e08-8c4b-8c37faf10ebb');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}